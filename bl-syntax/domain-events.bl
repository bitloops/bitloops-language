DomainEvent AccountCreatedDomainEvent<AccountEntity> {
    //Optional? Created by default for the firstpart of the name?
    eventName: 'ACCOUNT_CREATED';

    //default
    // getEventTopic() {
    //     return AccountCreated.eventName;
    // }
}

DomainEvent AccountCreatedDomainEvent<AccountEntity> 

//Should also be added in:  
//1. Aggregate create when new object  -> account.addDomainEvent(new AccountCreated(account));
//2. dispatchEvent method call in repository mutation methods -> dispatchEventsCallback
//3. Subscriptions in domain events should be set in order to be registered

//Evaluation should be with create
Root Entity AccountEntity {
    static create(props: AccountProps): (OK(AccountEntity), Errors())  {
        props.value = 1 
        const account = AccountEntity(props);
        const isNew = props.id != null;
        if (isNew) {
            account.addDomainEvent(AccountCreatedDomainEvent);
        }
        return account;
    }

}

//AST
{
  "domainEvent": {
    "entityIdentifier": EntityIdentifierNode;
    "name": IdentifierNode;
    "topic": ExpressionNode;
  }
  // 'default_topic' -> ExpressionNode;
}

type TDomainEvent = {
  entityIdentifier: TEntityIdentifier;
  name: string;
  topic: TExpression;
}



private constructor(props: AccountProps) {
    super(props, props.id);
  }

  public static create(
    props: AccountProps,
  ): Either<AccountEntity, DomainErrors.InvalidMonetaryValue | Domain.StandardVO.Currency.Value> {
    const account = new AccountEntity(props);
    const isNew = !props.id;
    if (isNew) {
      account.props.version = 1;
      account.addDomainEvent(new AccountCreated(account));
    }
    return ok(account);
  }
// TS

const ACCOUNT_CREATED_EVENT_NAME = 'ACCOUNT_CREATED_EVENT_NAME';
const FROM_CONTEXT_ID = contextId;

export class AccountCreated extends Domain.Event<AccountEntity> {
  public static readonly eventName = ACCOUNT_CREATED_EVENT_NAME;
  public static readonly fromContextId = FROM_CONTEXT_ID;

  constructor(public readonly account: AccountEntity, uuid?: string) {
    const metadata = {
      fromContextId: AccountCreated.fromContextId,
      id: uuid,
    };
    super(AccountCreated.getEventTopic(), account, metadata, account.id);
  }

  static getEventTopic() {
    return AccountCreated.eventName;
  }
}

