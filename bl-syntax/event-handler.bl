
IntegrationEventHandler SendEmailAfterMoneyDepositedHandler(customerService: CustomerServicePort) {
  //should we support use case as dependency
  // If Subscribed to integration-event, we need to define what version
  // and get the eventTopic to subscribe from it
  
  eventVersion: 'v1';
  
  //Should we have void as return type for visibility
  handle(event: MoneyDepositedToAccountIntegrationEvent) {
    const account = event.account;
    const accountId = account.id;

    const email = this.customerService.getEmailByAccountId(accountId.toString());

    const command = SendEmailVerificationCommand.create({ accountId: accountId.toString(), email });

    this.commandBus.send(command);
  }
}
  
//1. In TS we can check if query bus/command bus are unused and not include them in the dependencies
//2. In IntermediateAST -> CompleteAST we need to find the type of customerQueryResult

DomainEventHandler SendEmailAfterMoneyDepositedHandler(customerService: CustomerServicePort) {
  //should we support use case as dependency
  // If Subscribed to integration-event, we need to define what version
  // and get the eventTopic to subscribe from it
  
  //Should we have void as return type for visibility
  handle(event: MoneyDepositedToAccountDomainEvent) {
    const account = event.account;
    const accountId = account.id;

    const email = this.customerService.getEmailByAccountId(accountId.toString());

    const command = SendEmailVerificationCommand.create({ accountId: accountId.toString(), email });

    this.commandBus.send(command);
  }
}