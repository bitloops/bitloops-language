
// Structs or DTOs for each version of the integration event
Struct TodoIntegrationSchemaV1 {
  string accountId;
  int32 balanceAmount;
}

Struct TodoIntegrationSchemaV2 {
  string accountId;
  int32 amount;
}

Props MoneyDepositedInputProps {
  string accountId;
  int32 balanceAmount;
}; 

IntegrationEvent MoneyDepositedIntegrationEvent {
  input: MoneyDepositedInputProps;
  versions: ['v1.0.0', 'v2'];

  // Basically just needs to define a mapper of data for each version
  // Predefined method names based on provided versions, (concat of standard word + CammelCase version)
  toIntegrationDataV1(data): TodoIntegrationSchemaV1 {
    return {
      accountId: data.accountId,
      balanceAmount: data.balanceAmount,
    };
  }

  toIntegrationDataV2(data): TodoIntegrationSchemaV2 {
    return {
      accountId: data.accountId,
      amount: data.balanceAmount,
    };
  }

  // Needs to define the topic for each version, we could have a default topic
  getEventTopic(version) {
    return `integration.${MoneyDepositedIntegrationEvent.name}.${version}`;
  }
}

/**
 * input can be a DomainEvent (or Props in the future)
 * in the case of a DomainEvent, we generate the domainEventHandler that publishes the integration event
 */
@disabled['v2']
IntegrationEvent MoneyDepositedIntegrationEvent(input: MoneyDepositedToAccountDomainEvent) {
  // Maybe have disable list of versions?

  'v1.0.9' : TodoIntegrationSchemaV1 {
    const fullName = `${input.firstName} ${input.lastName}`;
    return {
      accountId: event.account.id.toString,
      balanceAmount: input.balanceAmount,
    };
  }

  'v2' : TodoIntegrationSchemaV2 {
    return {
      accountId: input.accountId,
      amount: input.balanceAmount,
    };
  }

  // Needs to define the topic for each version, we could have a default topic
  // This could be automated??
  // getEventTopic(version) {
  //   return `integration.${MoneyDepositedIntegrationEvent.name}.${version}`;
  // }
}