Feature: Expression to Typescript target language

  Background:
    Given type is "TExpression"
    And language is "TypeScript"

    Scenario Template: Expression with all possible expression types
    Given I have an expression <expression>
    When I generate the code
    Then I should see the <output> code

    Examples:
      | expression| output                                     |
      | {"expression": {"evaluation":{"isInstanceOf":[{"value":"result","type":"variable"},{"class":"Error"}]}}}| result.isFail()                            |
      | {"expression": {"classInstantiation":{"className":"Dog"}}}| new Dog()                                  |
      | {"expression": {"struct":{"name":"StructName","fields":[{"name":"name","expression":{"evaluation":{"regularEvaluation":{"type":"string","value":"test"}}}}]}}}| {name:'test'}                              |
      | {"expression": {"struct":{"name":"StructName","fields":[{"name":"name","expression":{"backTickString":"${name} is an invalid name"}}]}}}| {name:`${name} is an invalid name`}        |
      | {"expression":{"logicalExpression":{"orExpression":{"left":{"relationalExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"title"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"120"}}},"operator":">"}},"right":{"relationalExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"title"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"5"}}},"operator":"<"}}}}}}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | title > 120 \|\| title < 5                  |
      | {"expression":{"logicalExpression":{"andExpression":{"left":{"equalityExpression":{"left":{"multiplicativeExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"title"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"3"}}},"operator":"*"}},"right":{"additiveExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"int32","value":"120"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"5"}}},"operator":"-"}},"operator":"!="}},"right":{"equalityExpression":{"left":{"multiplicativeExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"title"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"3"}}},"operator":"/"}},"right":{"additiveExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"int32","value":"5"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"3"}}},"operator":"+"}},"operator":"=="}}}}}} | title * 3 != 120 - 5 && title / 3 == 5 + 3 |
      | {"expression":{"logicalExpression":{"andExpression":{"left":{"relationalExpression":{"left":{"multiplicativeExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"title"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"3"}}},"operator":"%"}},"right":{"additiveExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"int32","value":"120"}}},"right":{"evaluation":{"regularEvaluation":{"type":"int32","value":"5"}}},"operator":"-"}},"operator":">="}},"right":{"relationalExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"title"}}},"right":{"evaluation":{"regularEvaluation":{"type":"float","value":"500.6"}}},"operator":"<="}}}}}}                                                                                                                                                                                                                                                 | title % 3 >= 120 - 5 && title <= 500.6     |
      | {"expression":{"logicalExpression":{"notExpression":{"evaluation":{"regularEvaluation":{"type":"variable","value":"a"}}}}}}| ! a                                        |
      | {"expression":{"logicalExpression":{"xorExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"a"}}},"right":{"evaluation":{"regularEvaluation":{"type":"variable","value":"b"}}}}}}}| (a && ! b) \|\| (! a && b)                  |
      | {"expression":{"logicalExpression":{"andExpression":{"left":{"parenthesizedExpression":{"equalityExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"a"}}},"right":{"evaluation":{"regularEvaluation":{"type":"variable","value":"b"}}},"operator":"=="}}},"right":{"parenthesizedExpression":{"relationalExpression":{"left":{"evaluation":{"regularEvaluation":{"type":"variable","value":"c"}}},"right":{"evaluation":{"regularEvaluation":{"type":"variable","value":"d"}}},"operator":">="}}}}}}}                                                                                                                                                                                                                                                                                                                                                                                                                                                           | (a == b) && (c >= d)                       |
      | {"expression":{"arrayLiteral":[{"expression":{"evaluation":{"regularEvaluation":{"type":"int32","value":"1"}}}},{"expression":{"evaluation":{"regularEvaluation":{"type":"int32","value":"2"}}}},{"expression":{"evaluation":{"regularEvaluation":{"type":"int32","value":"3"}}}}]}}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | [1,2,3]                                    |







    Scenario Template: Unsupported expression type
    Given I have an invalid <expression> with unsupported <expressionType>
    When I generate the code
    Then I should get an error saying that <expression> is unsupported

    Examples:
      | expression                                                                                | expressionType |
      | {"invalidType":{"isInstanceOf":[{"value":"result","type":"variable"},{"class":"Error"}]}} | invalidType    |

