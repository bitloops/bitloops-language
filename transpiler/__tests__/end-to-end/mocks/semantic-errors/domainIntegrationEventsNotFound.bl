// DomainEvent TodoCreatedDomainEvent<TodoEntity>

DomainEventHandler TodoCreatedDomainEventHandler() {
    handle(event: TodoCreatedDomainEvent) {
      this.commandBus.send(command);
    }
  }

Props TitleProps {
    string title;
  }

Rule TitleOutOfBoundsRule(title: string) throws DomainErrors.TitleOutOfBoundsError {
  isBrokenIf(title.length > 150 OR title.length < 4);
}

ValueObject TitleVO {
    static create(props: TitleProps): (OK(TitleVO), Errors(DomainErrors.TitleOutOfBoundsError)) {
      applyRules(TitleOutOfBoundsRule(props.title));
    }
  }

  DomainError TitleOutOfBoundsError(title: string)  {
    message: 'Title is out of range',
    errorId: 'fe53432-8ef7-42349-ab67-cb83d1d7772fe',
  }

Props TodoProps {
    optional UUIDv4 id;
    TitleVO title;
    bool completed;
  }

Root Entity TodoEntity {    
    static create(props: TodoProps): (OK(TodoEntity), Errors()) {} 
    
    check(title: TitleVO):  (OK(void), Errors()) {
        this.title = title;
      }
}

DomainEvent MoneyDepositedToAccountDomainEvent<TodoEntity> {
  // string email;
}

// IntegrationEvent MoneyDepositedIntegrationEvent(event: MoneyDepositedToAccountDomainEvent) {
//     // Maybe have disable list of versions?
  
//     'v1' : IntegrationSchemaV1 {
//       const moneyDeposited = IntegrationSchemaV1({
//         accountId: event.account.id.toString(),
//         amount: event.account.balance.amount,
//       });
//       return moneyDeposited;
//     }
  
//     'v2.0.1' : IntegrationSchemaV2 {
//       const moneyDeposited = IntegrationSchemaV2({
//         accountId: event.account.id.toString(),
//       });
//       return moneyDeposited;
//     }
// }

IntegrationEventHandler MoneyDepositedIntegrationEventHandler() {
    
    eventVersion: 'v1';
    
    handle(event: [banking][banking]MoneyDepositedIntegrationEvent) {
  
      this.commandBus.send(command);
    }
}

