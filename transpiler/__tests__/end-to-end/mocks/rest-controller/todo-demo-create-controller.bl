RESTController CreateTodoRESTController (createTodoUseCase: CreateTodoUseCase) {
  method: REST.Methods.POST;
  execute(request, response) {
    const dto = CreateTodoRequestDTO({ title: request.body.title });

    const result = this.createTodoUseCase.execute(dto);

    if (result is Error) {
      switch (result.getClass()) {
        case DomainErrors.TitleOutOfBoundsError: {
          this.clientError(response, result.message);
          break;
        }
        default: {
          this.fail(response, result.message);
        }
      }
    } else {
      this.created(response);
    }
  }
}

UseCase CreateTodoUseCase (todoRepo: TodoWriteRepoPort) {
  execute (requestDTO: CreateTodoRequestDTO): (OK(void), Errors(DomainErrors.TitleOutOfBoundsError)) {
    const title = TitleVO({ title: requestDTO.title });
    const todo = TodoEntity({ title: title, completed: false });
    this.todoRepo.save(todo);
  }
}

RepoPort TodoWriteRepoPort<TodoEntity> extends CRUDWriteRepoPort;

DTO CreateTodoRequestDTO {
  string title;
}

Rule TitleOutOfBoundsRule(title: string) throws DomainErrors.TitleOutOfBoundsError {
  isBrokenIf(title.length > 150 OR title.length < 4);
}

Props TitleProps {
  string title;
}

ValueObject TitleVO {
  constructor(props: TitleProps): (OK(TitleVO), Errors(DomainErrors.TitleOutOfBoundsError)) {
    applyRules(TitleOutOfBoundsRule(props.title));
  }
}

Props TodoProps {
  optional UUIDv4 id;
  TitleVO title;
  bool completed;
}


Root Entity TodoEntity {
  constructor(props: TodoProps): (OK(TodoEntity), Errors()) {}

  complete(): (OK(void), Errors()) {
    this.completed = true;
  }

  uncomplete(): (OK(void), Errors()) {
    this.completed = false;
  }

  updateTitle(title: TitleVO):  (OK(void), Errors()) {
    this.title = title;
  }
}

DomainError TitleOutOfBoundsError(title: string)  {
  message: 'Title is out of range',
  errorId: 'fe53432-8ef7-42349-ab67-cb83d1d7772fe',
}