"use strict";(self.webpackChunkbitloops_com_docs=self.webpackChunkbitloops_com_docs||[]).push([[9433],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,v=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5263:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_label:"EventHandler",title:"Event Handler - Basic Syntax",description:"EventHandler syntax on Bitloops Language - Event Handlers dictate the action that follows a specific event.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","event handler"]},i="EventHandler",l={unversionedId:"reference/event-handler",id:"reference/event-handler",title:"Event Handler - Basic Syntax",description:"EventHandler syntax on Bitloops Language - Event Handlers dictate the action that follows a specific event.",source:"@site/docs/reference/event-handler.md",sourceDirName:"reference",slug:"/reference/event-handler",permalink:"/docs/bitloops-language/reference/event-handler",draft:!1,editUrl:"https://github.com/bitloops/bitloops-language/edit/main/documentation/docs/reference/event-handler.md",tags:[],version:"current",frontMatter:{sidebar_label:"EventHandler",title:"Event Handler - Basic Syntax",description:"EventHandler syntax on Bitloops Language - Event Handlers dictate the action that follows a specific event.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","event handler"]},sidebar:"tutorialSidebar",previous:{title:"Entity",permalink:"/docs/bitloops-language/reference/entity"},next:{title:"Features",permalink:"/docs/bitloops-language/reference/features"}},c={},s=[],p={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"eventhandler"},"EventHandler"),(0,a.kt)("p",null,"An event handler is a function which is called when an domain event occurs."))}d.isMDXComponent=!0}}]);