"use strict";(self.webpackChunkbitloops_com_docs=self.webpackChunkbitloops_com_docs||[]).push([[1985],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},701:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_label:"Entity",title:"Entity - Basic Syntax",description:"Entity syntax on Bitloops Language - An entity is a representation of an object that has an identity. It is unique!",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","entity"]},i="Entity",s={unversionedId:"reference/entity",id:"reference/entity",title:"Entity - Basic Syntax",description:"Entity syntax on Bitloops Language - An entity is a representation of an object that has an identity. It is unique!",source:"@site/docs/reference/entity.md",sourceDirName:"reference",slug:"/reference/entity",permalink:"/docs/bitloops-language/reference/entity",draft:!1,editUrl:"https://github.com/bitloops/bitloops-language/edit/main/documentation/docs/reference/entity.md",tags:[],version:"current",frontMatter:{sidebar_label:"Entity",title:"Entity - Basic Syntax",description:"Entity syntax on Bitloops Language - An entity is a representation of an object that has an identity. It is unique!",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","entity"]},sidebar:"tutorialSidebar",previous:{title:"DTO",permalink:"/docs/bitloops-language/reference/dto"},next:{title:"EventHandler",permalink:"/docs/bitloops-language/reference/event-handler"}},l={},p=[{value:"Example",id:"example",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"entity"},"Entity"),(0,a.kt)("p",null,"An ",(0,a.kt)("em",{parentName:"p"},"entity")," is an object defined primarily by its idenity. ",(0,a.kt)("sup",{parentName:"p",id:"fnref-evans2004"},(0,a.kt)("a",{parentName:"sup",href:"#fn-evans2004",className:"footnote-ref"},"evans2004"))),(0,a.kt)("p",null,"The above definition requires all ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entities"))," to have some sort of identifier attached to them.\nThis is unlike a ",(0,a.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/value-object"},"ValueObject")," that holds attributes with specific qualities but no identifier to distinguish\nbetween different values."),(0,a.kt)("p",null,"An example of an ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entity"))," could be an ",(0,a.kt)("em",{parentName:"p"},"Address")," that has a unique identifier through\nwhich it can be referenced by other ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entities"))," using its Id without needing to directly store the values of the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entity"))," in that object. On the other hand, an ",(0,a.kt)("em",{parentName:"p"},"Address")," could alternatively be represented by a ",(0,a.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/value-object"},"ValueObject")," under different circumstances. In a software printing out envelopes, an ",(0,a.kt)("em",{parentName:"p"},"Address")," could simply be a\n",(0,a.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/value-object"},"ValueObject")," because it would represent just\na value being printed on an envelope. Nonetheless, for a postal service an\naddress's history might need to be tracked e.g. to forward mail sent to the old address, to the new address, in which case an ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entity"))," would be more appropriate."),(0,a.kt)("p",null,"A very special type of ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entity"))," is the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entity")),". You can think of a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entity"))," as an entity that can be directly looked up using just its Id without relying on a different ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entity")),". For example, in the context of a purchase order, you could have several lines of items (Item 1, Item 2, Item 3 etc.) within that purchase order. Item 1 on its own doesn't mean much, and so a request to a URL such as ",(0,a.kt)("a",{parentName:"p",href:"https://myexamplemarketplace.com/items/1"},"https://myexamplemarketplace.com/items/1")," would make no sense because the Id 1 only makes sense within a specific purchase order such as this ",(0,a.kt)("a",{parentName:"p",href:"https://myexamplemarketplace.com/purchase-order/123/items/1"},"https://myexamplemarketplace.com/purchase-order/123/items/1"),". In this example, the purchase order would have to be a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entity")),' and not a "simple" Entity whereas the item would be just an ',(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entity")),". If you need help with these concepts don't hesitate to reach out on our Discord."),(0,a.kt)("p",null,"In the literature, you will see a lot of time the words ",(0,a.kt)("em",{parentName:"p"},"Aggregate")," and ",(0,a.kt)("em",{parentName:"p"},"Aggregate Root"),". An ",(0,a.kt)("em",{parentName:"p"},"Aggregate")," is the conceptual combination of a Root Entity and the boundary of all other ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entities"))," placed inside the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entity"))," whereas, an ",(0,a.kt)("em",{parentName:"p"},"Aggragate Root")," is the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entity"))," of the ",(0,a.kt)("em",{parentName:"p"},"Aggregate"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Important")),": An ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Entity"))," can be included in only a single ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entity"))," but could be referenced using its Id in several. Other ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entities"))," can also be referenced by their Ids in another ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Root Entity"))," but cannot be included into another directly."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// This is the Root Entity definition - for a simple entity just remove the Root before the Entity\nRoot Entity TodoEntity {\n  // Props are automatically converted into class variables with getters and setters.\n  // If you want to make them private then you need to add the word private before the property declaration\n  // e.g. private title Title;\n  // In such a case, no getter / setter methods are going to be created and you will only be able to access\n  // the variable from within class methods.\n  // To access a class variable you use "this." infront of the name of the variable e.g. this.title\n  constructor(props: TodoProps): (OK(TodoEntity), Errors(DomainErrors.InvalidTitleError)) {}\n\n  // methods that return OK/Errors are automatically public, if you need a private one that returns OK/Errors\n  // you can add "private" before the method name e.g. private complete()\n  complete(): (OK(), Errors()) {\n    this.completed = true;\n  }\n\n  uncomplete(): (OK(), Errors()) {\n    this.completed = false;\n  }\n\n  updateTitle(title: string): (OK(), Errors(DomainErrors.InvalidTitleError)) {\n    this.title = TitleVO({title: title});\n    return this.title.getTitle();\n  }\n}\n\n// Props are used to define the required (or optional) properties of a class (such as ValueObject, Entity, UseCase etc.)\nProps TitleProps {\n  Title title;\n}\n\n// A Rule is used to validate the values of a ValueObject\nRule IsValidTitle(title: string) throws DomainErrors.InvalidTitleError {\n  isBrokenIf(title > 150 OR title < 4);\n}\n\n// An Entity usually contains ValueObjects or other Entities\nValueObject TitleVO {\n  constructor(props: TitleProps): (OK(TitleVO), Errors(DomainErrors.InvalidTitleError)) {\n    applyRules(IsValidTitle(props.title));\n  }\n}\n\nDomainError InvalidTitleError(title: string) {\n  message: `Title ${title} is out of range`,\n  errorId: \'fe53432-8ef7-42349-ab67-cb83d1d7772fe\',\n}\n')),(0,a.kt)("div",{className:"footnotes"},(0,a.kt)("hr",{parentName:"div"}),(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol",id:"fn-evans2004"},"Eric Evans, Domain Driven Design, 2004",(0,a.kt)("a",{parentName:"li",href:"#fnref-evans2004",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);