"use strict";(self.webpackChunkbitloops_com_docs=self.webpackChunkbitloops_com_docs||[]).push([[3836],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),u=a,h=d["".concat(p,".").concat(u)]||d[u]||g[u]||n;return r?o.createElement(h,i(i({ref:t},c),{},{components:r})):o.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<n;s++)i[s]=r[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3592:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>n,metadata:()=>l,toc:()=>s});var o=r(7462),a=(r(7294),r(3905));const n={sidebar_label:"RepoPort",title:"Repository Port - Basic Syntax",description:"RepoPort syntax on Bitloops Language - Repository Ports allows developers to declare an interface to connect different databases easily using a Repository Adapter.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","repoport","repository port"]},i="RepoPort",l={unversionedId:"reference/repository-port",id:"reference/repository-port",title:"Repository Port - Basic Syntax",description:"RepoPort syntax on Bitloops Language - Repository Ports allows developers to declare an interface to connect different databases easily using a Repository Adapter.",source:"@site/docs/reference/repository-port.md",sourceDirName:"reference",slug:"/reference/repository-port",permalink:"/docs/bitloops-language/reference/repository-port",draft:!1,editUrl:"https://github.com/bitloops/bitloops-language/edit/main/documentation/docs/reference/repository-port.md",tags:[],version:"current",frontMatter:{sidebar_label:"RepoPort",title:"Repository Port - Basic Syntax",description:"RepoPort syntax on Bitloops Language - Repository Ports allows developers to declare an interface to connect different databases easily using a Repository Adapter.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","repoport","repository port"]},sidebar:"tutorialSidebar",previous:{title:"ReadModel",permalink:"/docs/bitloops-language/reference/read-model"},next:{title:"Rule",permalink:"/docs/bitloops-language/reference/rule"}},p={},s=[{value:"Syntax",id:"syntax",level:3},{value:"CRUDRepoPort",id:"crudrepoport",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example",level:3}],c={toc:s},d="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"repoport"},"RepoPort"),(0,a.kt)("p",null,"The RepoPort component is a tool which will help you declare an interface in order to plug in different databases easily (via RepositoryAdapter).\nIt acts as an interface, in order to declare methods which will be later be implemented by the corresponding RepoAdapter. Its name and functionality is inspired by the Repository Pattern."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"More information not available yet!\n")),(0,a.kt)("h3",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Not available yet!\n")),(0,a.kt)("h2",{id:"crudrepoport"},"CRUDRepoPort"),(0,a.kt)("p",null,"The CRUDRepoPort is a RepoPort which could be used in order to get out of the box ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"},"CRUD")," operations functionality ready to utilize, for a specific ",(0,a.kt)("strong",{parentName:"p"},"Aggregate"),"."),(0,a.kt)("h3",{id:"syntax-1"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"}," RepoPort MyHelloRepoPort<MyAggregate> extends CRUDRepoPort;\n")),(0,a.kt)("p",null,"In order to utilize it, a ",(0,a.kt)("strong",{parentName:"p"},"RepoPort")," should be declared as the code above.\nMore specifically the command starts with the reserved word: ",(0,a.kt)("strong",{parentName:"p"},"RepoPort")," indicating the type. Then the name of the repository is declared (",(0,a.kt)("inlineCode",{parentName:"p"},"MyHelloRepoPort")," in this case). Afterwards the name of the ",(0,a.kt)("strong",{parentName:"p"},"Aggregate")," which corresponds to the specific repository should should be declared inside of brackets ",(0,a.kt)("inlineCode",{parentName:"p"},"<>")," then the reserved word ",(0,a.kt)("strong",{parentName:"p"},"extends")," is used in order to indicate that this repository will inherit all the functionality of a ",(0,a.kt)("strong",{parentName:"p"},"RepoPort"),"."),(0,a.kt)("p",null,"The CRUDRepoPort declaration will under the hood create an interface with already declared CRUD methods for the specified ",(0,a.kt)("strong",{parentName:"p"},"RepoPort")," (",(0,a.kt)("inlineCode",{parentName:"p"},"MyHelloRepoPort")," in the example above) in the target language. This will include CRUD operations for the ",(0,a.kt)("strong",{parentName:"p"},"Aggegate")," as well for all the ",(0,a.kt)("strong",{parentName:"p"},"Entities")," it contains."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Aggregate")," declaration ",(0,a.kt)("inlineCode",{parentName:"p"},"<MyAggregate>")," is necessary in order for the automatic code generation to take place. More specifically the code generation algorithm will identify all the ",(0,a.kt)("strong",{parentName:"p"},"Entities")," belonging to the ",(0,a.kt)("strong",{parentName:"p"},"Aggregate"),", and create all the CRUD methods with the respective data types."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"Let's say that you model a car as your ",(0,a.kt)("strong",{parentName:"p"},"Aggregate"),", and your ",(0,a.kt)("inlineCode",{parentName:"p"},"CarAggregate")," has fields like (vendor, model, year, etc.), and it contains an ",(0,a.kt)("inlineCode",{parentName:"p"},"EngineEntity")," ",(0,a.kt)("strong",{parentName:"p"},"Entity")," (will contain an Id of the specific engine and information for the specific engine like vendor, productCode etc.) and a collection of ",(0,a.kt)("inlineCode",{parentName:"p"},"WheelEntity")," ",(0,a.kt)("strong",{parentName:"p"},"Entity")," (will contain information like vendor, productCode, materialType, yearOfConstruction, etc.). The wheels collection of wheel entities is a collection since it is assumed in this model that the ",(0,a.kt)("inlineCode",{parentName:"p"},"CarAggregate")," will have 4 wheels which could be completely different."),(0,a.kt)("p",null,"In this case you will declare the specific ",(0,a.kt)("strong",{parentName:"p"},"RepoPort")," as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"}," RepoPort CarRepoPort<CarAggregate> extends CRUDRepoPort;\n")),(0,a.kt)("p",null,"The system will automatically create the following CRUD operations signature declarations on the CarRepoPort, under the hood:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// All these will be transparent for the user\n// for the CarAggregate\ngetAll(): CarAggregate[]\ngetById(carId: Id): CarAggregate\nsave(car: CarAggregate): void\nupdate(car: CarAggregate): void\ndelete(carId: Id): void\n\n// for the  Wheels\ngetWheelById(carId: Id, wheelId: Id): WheelEntity\ngetAllWheels(carId): WheelEntity[] // This can be autogenerated since we know that wheels are a collection inside the CarAggregate\n\n// for the Engine\ngetEngineById(carId: Id, wheelId: Id): EngineEntity\n")),(0,a.kt)("p",null,"The methods above will then be available to be used inside application layer e.g. ",(0,a.kt)("strong",{parentName:"p"},"CommandHandler")," by default like this, respectively:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// for the CarAggregate\ncarRepo.getAll();\ncarRepo.getById(carId);\ncarRepo.save(car);\ncarRepo.update(car);\ncarRepo.delete(carId);\n\n// for the  Wheels\ncarRepo.getWheelById(carId, wheelId);\ncarRepo.getAllWheels(carId);\n\n// for the Engine\ncarRepo.getEngineById(carId, wheelId);\n")),(0,a.kt)("p",null,"Note that the autogenerated methods for the entities ",(0,a.kt)("strong",{parentName:"p"},"will not mutate the state")," - since the state can be mutated only via the ",(0,a.kt)("strong",{parentName:"p"},"Aggregate")," so they could only represent queries."),(0,a.kt)("p",null,"The commands above will return all the information for the specific ",(0,a.kt)("inlineCode",{parentName:"p"},"CarAggregate")," or its Entities."),(0,a.kt)("hr",null),(0,a.kt)("p",null,"More custom methods can be added to a ",(0,a.kt)("strong",{parentName:"p"},"RepoPort")," which extends the ",(0,a.kt)("strong",{parentName:"p"},"CRUDRepoPort")," by defining specific methods, with the synstax displayed below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"}," RepoPort CarRepoPort<CarAggregate> extends CRUDRepoPort {\n // Not available yet! Similar to the declaration of the RepoPort\n };\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Finally in order to be able to connect a specific database to the specific RepoPort, a declaration of the specific concretion for this port via a ready to use adapter should be added at the setup. The syntax for using a mongo database could be as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"}," RepoAdapters.Mongo concretes [Demo][Hello World]MyHelloRepoPort;\n")))}g.isMDXComponent=!0}}]);