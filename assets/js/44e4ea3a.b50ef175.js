"use strict";(self.webpackChunkbitloops_com_docs=self.webpackChunkbitloops_com_docs||[]).push([[9689],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,m=d["".concat(i,".").concat(f)]||d[f]||u[f]||a;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6786:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_label:"RESTController",title:"RESTController - Basic Syntax",description:"RESTController syntax on Bitloops Language - RESTController is used to make restful web services and handle requests made by clients. More specifically, it can handle REST APIs such as GET, POST, DELETE, PUT and PATCH.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","restcontroller"]},l="RESTController",s={unversionedId:"reference/rest-controller",id:"reference/rest-controller",title:"RESTController - Basic Syntax",description:"RESTController syntax on Bitloops Language - RESTController is used to make restful web services and handle requests made by clients. More specifically, it can handle REST APIs such as GET, POST, DELETE, PUT and PATCH.",source:"@site/docs/reference/rest-controller.md",sourceDirName:"reference",slug:"/reference/rest-controller",permalink:"/docs/bitloops-language/reference/rest-controller",draft:!1,editUrl:"https://github.com/bitloops/bitloops-language/edit/main/documentation/docs/reference/rest-controller.md",tags:[],version:"current",frontMatter:{sidebar_label:"RESTController",title:"RESTController - Basic Syntax",description:"RESTController syntax on Bitloops Language - RESTController is used to make restful web services and handle requests made by clients. More specifically, it can handle REST APIs such as GET, POST, DELETE, PUT and PATCH.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","restcontroller"]},sidebar:"tutorialSidebar",previous:{title:"RepoPort",permalink:"/docs/bitloops-language/reference/repository-port"},next:{title:"Rule",permalink:"/docs/bitloops-language/reference/rule"}},i={},c=[{value:"Definition",id:"definition",level:3},{value:"Examples",id:"examples",level:3},{value:"Declaring a RESTController",id:"declaring-a-restcontroller",level:5},{value:"Syntax",id:"syntax",level:3},{value:"Declaring a RESTController",id:"declaring-a-restcontroller-1",level:5},{value:"Further reading",id:"further-reading",level:3}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"restcontroller"},"RESTController"),(0,o.kt)("h3",{id:"definition"},"Definition"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"RESTController"))," is used for making restful web services and handle the requests made by the client. It allows to handle all REST APIs such as GET, POST, DELETE, PUT, PATCH requests.\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"RestController"))," creates the request ",(0,o.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/dto"},"DTO")," and executes the ",(0,o.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/usecase"},"UseCase")," with this DTO created. Then, it just handles the result to present with the appropriate format and status code, the data to the client."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("h5",{id:"declaring-a-restcontroller"},"Declaring a RESTController"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  RESTController UpdateTodoRESTController (updateTodoUseCase: UpdateTodoUseCase) {\n  method: REST.Methods.PUT;\n  execute(request, response) {\n    const dto = UpdateTodoRequestDTO({ id: request.params.id, completed: request.body.completed, title: request.body.title  });\n\n    const result = this.updateTodoUseCase.execute(dto);\n\n    if (result is Error) {\n      switch (result.getClass()) {\n        case ApplicationErrors.ToDoNotFoundError: {\n          this.notFound(response, result);\n          break;\n        }\n        default: {\n          this.fail(response, result.message);\n        }\n      }\n    } else {\n      this.ok(response);\n    }\n  }\n}\n")),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("h5",{id:"declaring-a-restcontroller-1"},"Declaring a RESTController"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  RESTController <identifier name with a Controller suffix> (<dependencies>) {\n      method: REST.Methods.<REST API Methods>;\n      execute (<request>, <response>) {\n        <statements>\n        <UseCase execution statement>\n        <statements>\n      }\n  }\n")),(0,o.kt)("p",null,"References for the above:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/bitloops-language/reference/usecase"},"UseCase")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/bitloops-language/reference/dto"},"DTO"))),(0,o.kt)("h3",{id:"further-reading"},"Further reading"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.redhat.com/en/topics/api/what-is-a-rest-api"},"REST API"))))}u.isMDXComponent=!0}}]);