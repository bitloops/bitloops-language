"use strict";(self.webpackChunkbitloops_com_docs=self.webpackChunkbitloops_com_docs||[]).push([[6892],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9773:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_label:"Rule",title:"Rule - Basic Syntax",description:"Rule syntax on Bitloops Language - Rule ...",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","rule"]},i="Rule",l={unversionedId:"reference/rule",id:"reference/rule",title:"Rule - Basic Syntax",description:"Rule syntax on Bitloops Language - Rule ...",source:"@site/docs/reference/rule.md",sourceDirName:"reference",slug:"/reference/rule",permalink:"/docs/bitloops-language/reference/rule",draft:!1,editUrl:"https://github.com/bitloops/bitloops-language/edit/main/documentation/docs/reference/rule.md",tags:[],version:"current",frontMatter:{sidebar_label:"Rule",title:"Rule - Basic Syntax",description:"Rule syntax on Bitloops Language - Rule ...",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","rule"]},sidebar:"tutorialSidebar",previous:{title:"RepoPort",permalink:"/docs/bitloops-language/reference/repository-port"},next:{title:"ServicePort",permalink:"/docs/bitloops-language/reference/service-port"}},s={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Using isBrokenIf",id:"using-isbrokenif",level:3}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rule"},"Rule"),(0,a.kt)("p",null,"A Rule or a Business Rule is a language element which captures some business rules of the language. They are used inside the domain layer to enforce the invariants.\nIt provides a structured way to encapsulate complex business conditions and exceptions, ensuring they are consistently enforced across the domain layer of your application."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,"Each Rule can throw a Domain Error when its associated condition is not satisfied. The Domain Error serves as an exception mechanism indicating a violation of business rules."),(0,a.kt)("p",null,"For instance, let's consider the following Domain Error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"DomainError InsufficientBalanceError(balance: float) {\n    message: `Insufficient balance: ${balance} in account`,\n    errorId: 'INSUFFICIENT_BALANCE`\n}\n")),(0,a.kt)("p",null,"This error is thrown when an operation attempts to reduce an account's balance below zero."),(0,a.kt)("p",null,"We define the corresponding Domain Rule, AccountCannotHaveNegativeBalanceRule, as shown below:"),(0,a.kt)("p",null,"We would declare the corresponding Domain Rule like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Rule AccountCannotHaveNegativeBalanceRule(amount: float, balance: float) throws DomainErrors.InsufficientBalanceError {\n    const balanceUpdated = balance - amount;\n    isBrokenIf(balanceUpdated < 0, (balanceUpdated, amount));\n}\n")),(0,a.kt)("p",null,"Here, the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountCannotHaveNegativeBalanceRule")," Rule encapsulates the invariant that an account's balance cannot become negative. If the amount to be subtracted from the balance would result in a negative value, the ",(0,a.kt)("inlineCode",{parentName:"p"},"isBrokenIf")," function throws the ",(0,a.kt)("inlineCode",{parentName:"p"},"InsufficientBalanceError")," Domain Error."),(0,a.kt)("h3",{id:"using-isbrokenif"},"Using isBrokenIf"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"isBrokenIf")," function is central to a Domain Rule definition. This function accepts two arguments:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A boolean condition to be evaluated."),(0,a.kt)("li",{parentName:"ol"},"The arguments to be passed to the Domain Error, in case the condition is evaluated to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,a.kt)("p",null,"The second argument of ",(0,a.kt)("inlineCode",{parentName:"p"},"isBrokenIf")," maps directly to the parameters of the Domain Error. In the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountCannotHaveNegativeBalanceRule")," example above, ",(0,a.kt)("inlineCode",{parentName:"p"},"(balanceUpdated, amount)")," are passed as the second argument, which are then utilized by the ",(0,a.kt)("inlineCode",{parentName:"p"},"InsufficientBalanceError"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"isBrokenIf(balanceUpdated < 0, (balanceUpdated, amount));\n")),(0,a.kt)("p",null,"In situations where the Domain Error does not expect any arguments, you can omit the second argument from ",(0,a.kt)("inlineCode",{parentName:"p"},"isBrokenIf"),"."),(0,a.kt)("p",null,"For example, if we have a ",(0,a.kt)("inlineCode",{parentName:"p"},"GenericError")," that doesn't expect any arguments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"DomainError GenericError() {\n  message: `A generic error has occurred`,\n  errorId: 'GENERIC_ERROR`\n}\n")),(0,a.kt)("p",null,"We could write a corresponding rule like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Rule SomeGenericRule(parameter: string) throws DomainErrors.GenericError {\n  const someCondition = /_ evaluate some condition _/\n  isBrokenIf(someCondition);\n}\n")),(0,a.kt)("p",null,"Here, the ",(0,a.kt)("inlineCode",{parentName:"p"},"isBrokenIf")," function only requires the condition to be evaluated because ",(0,a.kt)("inlineCode",{parentName:"p"},"GenericError")," doesn't take any additional arguments."))}d.isMDXComponent=!0}}]);