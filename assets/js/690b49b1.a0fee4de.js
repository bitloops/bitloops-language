"use strict";(self.webpackChunkbitloops_com_docs=self.webpackChunkbitloops_com_docs||[]).push([[214],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=o.createContext({}),p=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),h=a,m=d["".concat(i,".").concat(h)]||d[h]||c[h]||n;return r?o.createElement(m,l(l({ref:t},u),{},{components:r})):o.createElement(m,l({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,l=new Array(n);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<n;p++)l[p]=r[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7933:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>p});var o=r(7462),a=(r(7294),r(3905));const n={sidebar_label:"Setup",title:"Setup - Basic Syntax",description:"Setup syntax on Bitloops Language - Setup is required to provide the server with the required information for initialization. This could be with GraphQL, Packages, RestControllers or Use Case.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","graphql","restcontroller","packages"]},l="Setup",s={unversionedId:"reference/setup",id:"reference/setup",title:"Setup - Basic Syntax",description:"Setup syntax on Bitloops Language - Setup is required to provide the server with the required information for initialization. This could be with GraphQL, Packages, RestControllers or Use Case.",source:"@site/docs/reference/setup.md",sourceDirName:"reference",slug:"/reference/setup",permalink:"/docs/bitloops-language/reference/setup",draft:!1,editUrl:"https://github.com/bitloops/bitloops-language/edit/main/documentation/docs/reference/setup.md",tags:[],version:"current",frontMatter:{sidebar_label:"Setup",title:"Setup - Basic Syntax",description:"Setup syntax on Bitloops Language - Setup is required to provide the server with the required information for initialization. This could be with GraphQL, Packages, RestControllers or Use Case.",keywords:["bitloops","bitloops language","basic syntax","programming language","variables","types","objects","data types","classes","interfaces","modules","functions","loops","services","graphql","restcontroller","packages"]},sidebar:"tutorialSidebar",previous:{title:"ServicePort",permalink:"/docs/bitloops-language/reference/service-port"},next:{title:"Step",permalink:"/docs/bitloops-language/reference/step-definitions"}},i={},p=[{value:"GraphQL",id:"graphql",level:2},{value:"<strong><code>setup.bl</code></strong>",id:"setupbl",level:4},{value:"Package",id:"package",level:2},{value:"Example",id:"example",level:3},{value:"<strong><code>setup.bl</code></strong>",id:"setupbl-1",level:4},{value:"UseCase",id:"usecase",level:2},{value:"Example",id:"example-1",level:3},{value:"<strong><code>setup.bl</code></strong>",id:"setupbl-2",level:4},{value:"RESTController",id:"restcontroller",level:2},{value:"Example",id:"example-2",level:3},{value:"<strong><code>setup.bl</code></strong>",id:"setupbl-3",level:4}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setup"},"Setup"),(0,a.kt)("h2",{id:"graphql"},"GraphQL"),(0,a.kt)("p",null,"You've defined your GraphQL Controllers, operation types, their input and output DTOs. Now you just need to provide this information to the GraphQL Server when you initialize it."),(0,a.kt)("p",null,"The GraphQL server constructor requires to provide a port and your set of graphQL controllers.\nYour schema will be generated by the associated controllers."),(0,a.kt)("h4",{id:"setupbl"},(0,a.kt)("strong",{parentName:"h4"},(0,a.kt)("inlineCode",{parentName:"strong"},"setup.bl"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"GraphQLServer({\n    port: env.APOLLO_SERVER || 5002,\n  }) {\n    [Demo][Hello World]HelloWorldGQLController();\n}\n")),(0,a.kt)("p",null,"You are familiar with the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"[Demo][Hello World]"))," syntax by now which indicates the bounded context and module where your controller resides."),(0,a.kt)("h2",{id:"package"},"Package"),(0,a.kt)("p",null,"You've defined your ",(0,a.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/package-port"},"PackagePort")," and your concrete ",(0,a.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/package-adapter"},"PackageAdapter")," and now you want to instantiate it in the setup. So, when you use the package in your application it will use the adapter that you have specified in the setup."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("h4",{id:"setupbl-1"},(0,a.kt)("strong",{parentName:"h4"},(0,a.kt)("inlineCode",{parentName:"strong"},"setup.bl"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"[Demo][Hello World]BitloopsGherkinPackageAdapter concretes GherkinPackagePort;\n")),(0,a.kt)("p",null,"You can use the above package in your application like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const bytes = GherkinPackage.encode(value);\n")),(0,a.kt)("h2",{id:"usecase"},"UseCase"),(0,a.kt)("p",null,"You've defined your ",(0,a.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/usecase"},"UseCase")," and now you want to instantiate it in the setup. Bounded Context and Module must be placed in front ",(0,a.kt)("inlineCode",{parentName:"p"},"[Todo][Todo]")," and the dependencies passed as arguments ",(0,a.kt)("inlineCode",{parentName:"p"},"todoWriteRepo"),", as it seems below:"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"For multiple dependencies separate them by comma")),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("h4",{id:"setupbl-2"},(0,a.kt)("strong",{parentName:"h4"},(0,a.kt)("inlineCode",{parentName:"strong"},"setup.bl"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const updateTodoUseCase = [Todo][Todo]UpdateTodoUseCase(todoWriteRepo);\n")),(0,a.kt)("h2",{id:"restcontroller"},"RESTController"),(0,a.kt)("p",null,"You've defined your ",(0,a.kt)("a",{parentName:"p",href:"/docs/bitloops-language/reference/rest-controller"},"RESTController")," and now you want to use it in the setup. You need to create a Rest Router that will link the REST API method and path with your controller. You then need to create a Rest Server that will use this Rest Router, in order to be able to run your server and make requests."),(0,a.kt)("h3",{id:"example-2"},"Example"),(0,a.kt)("h4",{id:"setupbl-3"},(0,a.kt)("strong",{parentName:"h4"},(0,a.kt)("inlineCode",{parentName:"strong"},"setup.bl"))),(0,a.kt)("p",null,"The Rest Router requires the web framework and inside to declare the REST API method and path with the controller."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const todoRESTRouter = RESTRouter(REST.Fastify) {\n  Patch('/:id'): [Todo][Todo]UpdateTodoRESTController(updateTodoUseCase);\n}\n")),(0,a.kt)("p",null,"The Rest Server requires the web framework, the port, the api prefix and inside to declare the route paths with the routers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"RESTServer({\n  server: REST.Fastify,\n  port: Env(FASTIFY_PORT, 5001),\n  apiPrefix: '/api',\n}) {\n  '/todo': todoRESTRouter;\n}\n")))}c.isMDXComponent=!0}}]);