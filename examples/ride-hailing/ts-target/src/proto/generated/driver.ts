/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: driver.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace driver {
    export class ErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: string;
            message?: string;
        }): ErrorResponse {
            const message = new ErrorResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
                message?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorResponse {
            return ErrorResponse.deserialize(bytes);
        }
    }
    export class BecomeAvailableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): BecomeAvailableRequest {
            const message = new BecomeAvailableRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeAvailableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeAvailableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeAvailableRequest {
            return BecomeAvailableRequest.deserialize(bytes);
        }
    }
    export class BecomeAvailableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: BecomeAvailableOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: BecomeAvailableErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, BecomeAvailableOKResponse, 1) as BecomeAvailableOKResponse;
        }
        set ok(value: BecomeAvailableOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, BecomeAvailableErrorResponse, 2) as BecomeAvailableErrorResponse;
        }
        set error(value: BecomeAvailableErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof BecomeAvailableOKResponse.prototype.toObject>;
            error?: ReturnType<typeof BecomeAvailableErrorResponse.prototype.toObject>;
        }): BecomeAvailableResponse {
            const message = new BecomeAvailableResponse({});
            if (data.ok != null) {
                message.ok = BecomeAvailableOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = BecomeAvailableErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof BecomeAvailableOKResponse.prototype.toObject>;
                error?: ReturnType<typeof BecomeAvailableErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeAvailableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeAvailableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = BecomeAvailableOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = BecomeAvailableErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeAvailableResponse {
            return BecomeAvailableResponse.deserialize(bytes);
        }
    }
    export class BecomeAvailableErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            unexpectedError?: ErrorResponse;
            accountIsBlockedError?: never;
            driverNotFoundError?: never;
        } | {
            unexpectedError?: never;
            accountIsBlockedError?: ErrorResponse;
            driverNotFoundError?: never;
        } | {
            unexpectedError?: never;
            accountIsBlockedError?: never;
            driverNotFoundError?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unexpectedError" in data && data.unexpectedError != undefined) {
                    this.unexpectedError = data.unexpectedError;
                }
                if ("accountIsBlockedError" in data && data.accountIsBlockedError != undefined) {
                    this.accountIsBlockedError = data.accountIsBlockedError;
                }
                if ("driverNotFoundError" in data && data.driverNotFoundError != undefined) {
                    this.driverNotFoundError = data.driverNotFoundError;
                }
            }
        }
        get unexpectedError() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
        }
        set unexpectedError(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_unexpectedError() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get accountIsBlockedError() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set accountIsBlockedError(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_accountIsBlockedError() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get driverNotFoundError() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 3) as ErrorResponse;
        }
        set driverNotFoundError(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_driverNotFoundError() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            const cases: {
                [index: number]: "none" | "unexpectedError" | "accountIsBlockedError" | "driverNotFoundError";
            } = {
                0: "none",
                1: "unexpectedError",
                2: "accountIsBlockedError",
                3: "driverNotFoundError"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            unexpectedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            accountIsBlockedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            driverNotFoundError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): BecomeAvailableErrorResponse {
            const message = new BecomeAvailableErrorResponse({});
            if (data.unexpectedError != null) {
                message.unexpectedError = ErrorResponse.fromObject(data.unexpectedError);
            }
            if (data.accountIsBlockedError != null) {
                message.accountIsBlockedError = ErrorResponse.fromObject(data.accountIsBlockedError);
            }
            if (data.driverNotFoundError != null) {
                message.driverNotFoundError = ErrorResponse.fromObject(data.driverNotFoundError);
            }
            return message;
        }
        toObject() {
            const data: {
                unexpectedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
                accountIsBlockedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
                driverNotFoundError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.unexpectedError != null) {
                data.unexpectedError = this.unexpectedError.toObject();
            }
            if (this.accountIsBlockedError != null) {
                data.accountIsBlockedError = this.accountIsBlockedError.toObject();
            }
            if (this.driverNotFoundError != null) {
                data.driverNotFoundError = this.driverNotFoundError.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_unexpectedError)
                writer.writeMessage(1, this.unexpectedError, () => this.unexpectedError.serialize(writer));
            if (this.has_accountIsBlockedError)
                writer.writeMessage(2, this.accountIsBlockedError, () => this.accountIsBlockedError.serialize(writer));
            if (this.has_driverNotFoundError)
                writer.writeMessage(3, this.driverNotFoundError, () => this.driverNotFoundError.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeAvailableErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeAvailableErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.unexpectedError, () => message.unexpectedError = ErrorResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.accountIsBlockedError, () => message.accountIsBlockedError = ErrorResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.driverNotFoundError, () => message.driverNotFoundError = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeAvailableErrorResponse {
            return BecomeAvailableErrorResponse.deserialize(bytes);
        }
    }
    export class BecomeAvailableOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): BecomeAvailableOKResponse {
            const message = new BecomeAvailableOKResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeAvailableOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeAvailableOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeAvailableOKResponse {
            return BecomeAvailableOKResponse.deserialize(bytes);
        }
    }
    export class BecomeUnavailableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): BecomeUnavailableRequest {
            const message = new BecomeUnavailableRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeUnavailableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeUnavailableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeUnavailableRequest {
            return BecomeUnavailableRequest.deserialize(bytes);
        }
    }
    export class BecomeUnavailableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: BecomeUnavailableOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: BecomeUnavailableErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, BecomeUnavailableOKResponse, 1) as BecomeUnavailableOKResponse;
        }
        set ok(value: BecomeUnavailableOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, BecomeUnavailableErrorResponse, 2) as BecomeUnavailableErrorResponse;
        }
        set error(value: BecomeUnavailableErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof BecomeUnavailableOKResponse.prototype.toObject>;
            error?: ReturnType<typeof BecomeUnavailableErrorResponse.prototype.toObject>;
        }): BecomeUnavailableResponse {
            const message = new BecomeUnavailableResponse({});
            if (data.ok != null) {
                message.ok = BecomeUnavailableOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = BecomeUnavailableErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof BecomeUnavailableOKResponse.prototype.toObject>;
                error?: ReturnType<typeof BecomeUnavailableErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeUnavailableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeUnavailableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = BecomeUnavailableOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = BecomeUnavailableErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeUnavailableResponse {
            return BecomeUnavailableResponse.deserialize(bytes);
        }
    }
    export class BecomeUnavailableErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            unexpectedError?: ErrorResponse;
            driverNotFoundError?: never;
        } | {
            unexpectedError?: never;
            driverNotFoundError?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unexpectedError" in data && data.unexpectedError != undefined) {
                    this.unexpectedError = data.unexpectedError;
                }
                if ("driverNotFoundError" in data && data.driverNotFoundError != undefined) {
                    this.driverNotFoundError = data.driverNotFoundError;
                }
            }
        }
        get unexpectedError() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
        }
        set unexpectedError(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_unexpectedError() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get driverNotFoundError() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set driverNotFoundError(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_driverNotFoundError() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            const cases: {
                [index: number]: "none" | "unexpectedError" | "driverNotFoundError";
            } = {
                0: "none",
                1: "unexpectedError",
                2: "driverNotFoundError"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            unexpectedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            driverNotFoundError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): BecomeUnavailableErrorResponse {
            const message = new BecomeUnavailableErrorResponse({});
            if (data.unexpectedError != null) {
                message.unexpectedError = ErrorResponse.fromObject(data.unexpectedError);
            }
            if (data.driverNotFoundError != null) {
                message.driverNotFoundError = ErrorResponse.fromObject(data.driverNotFoundError);
            }
            return message;
        }
        toObject() {
            const data: {
                unexpectedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
                driverNotFoundError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.unexpectedError != null) {
                data.unexpectedError = this.unexpectedError.toObject();
            }
            if (this.driverNotFoundError != null) {
                data.driverNotFoundError = this.driverNotFoundError.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_unexpectedError)
                writer.writeMessage(1, this.unexpectedError, () => this.unexpectedError.serialize(writer));
            if (this.has_driverNotFoundError)
                writer.writeMessage(2, this.driverNotFoundError, () => this.driverNotFoundError.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeUnavailableErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeUnavailableErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.unexpectedError, () => message.unexpectedError = ErrorResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.driverNotFoundError, () => message.driverNotFoundError = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeUnavailableErrorResponse {
            return BecomeUnavailableErrorResponse.deserialize(bytes);
        }
    }
    export class BecomeUnavailableOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): BecomeUnavailableOKResponse {
            const message = new BecomeUnavailableOKResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BecomeUnavailableOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BecomeUnavailableOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BecomeUnavailableOKResponse {
            return BecomeUnavailableOKResponse.deserialize(bytes);
        }
    }
    export class GetDriverAvailabilityRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetDriverAvailabilityRequest {
            const message = new GetDriverAvailabilityRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDriverAvailabilityRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDriverAvailabilityRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDriverAvailabilityRequest {
            return GetDriverAvailabilityRequest.deserialize(bytes);
        }
    }
    export class GetDriverAvailabilityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: GetDriverAvailabilityOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: GetDriverAvailabilityErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, GetDriverAvailabilityOKResponse, 1) as GetDriverAvailabilityOKResponse;
        }
        set ok(value: GetDriverAvailabilityOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, GetDriverAvailabilityErrorResponse, 2) as GetDriverAvailabilityErrorResponse;
        }
        set error(value: GetDriverAvailabilityErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof GetDriverAvailabilityOKResponse.prototype.toObject>;
            error?: ReturnType<typeof GetDriverAvailabilityErrorResponse.prototype.toObject>;
        }): GetDriverAvailabilityResponse {
            const message = new GetDriverAvailabilityResponse({});
            if (data.ok != null) {
                message.ok = GetDriverAvailabilityOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = GetDriverAvailabilityErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof GetDriverAvailabilityOKResponse.prototype.toObject>;
                error?: ReturnType<typeof GetDriverAvailabilityErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDriverAvailabilityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDriverAvailabilityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = GetDriverAvailabilityOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = GetDriverAvailabilityErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDriverAvailabilityResponse {
            return GetDriverAvailabilityResponse.deserialize(bytes);
        }
    }
    export class GetDriverAvailabilityErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            unexpectedError?: ErrorResponse;
            driverNotFoundError?: never;
        } | {
            unexpectedError?: never;
            driverNotFoundError?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unexpectedError" in data && data.unexpectedError != undefined) {
                    this.unexpectedError = data.unexpectedError;
                }
                if ("driverNotFoundError" in data && data.driverNotFoundError != undefined) {
                    this.driverNotFoundError = data.driverNotFoundError;
                }
            }
        }
        get unexpectedError() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
        }
        set unexpectedError(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_unexpectedError() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get driverNotFoundError() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set driverNotFoundError(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_driverNotFoundError() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            const cases: {
                [index: number]: "none" | "unexpectedError" | "driverNotFoundError";
            } = {
                0: "none",
                1: "unexpectedError",
                2: "driverNotFoundError"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            unexpectedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            driverNotFoundError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): GetDriverAvailabilityErrorResponse {
            const message = new GetDriverAvailabilityErrorResponse({});
            if (data.unexpectedError != null) {
                message.unexpectedError = ErrorResponse.fromObject(data.unexpectedError);
            }
            if (data.driverNotFoundError != null) {
                message.driverNotFoundError = ErrorResponse.fromObject(data.driverNotFoundError);
            }
            return message;
        }
        toObject() {
            const data: {
                unexpectedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
                driverNotFoundError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.unexpectedError != null) {
                data.unexpectedError = this.unexpectedError.toObject();
            }
            if (this.driverNotFoundError != null) {
                data.driverNotFoundError = this.driverNotFoundError.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_unexpectedError)
                writer.writeMessage(1, this.unexpectedError, () => this.unexpectedError.serialize(writer));
            if (this.has_driverNotFoundError)
                writer.writeMessage(2, this.driverNotFoundError, () => this.driverNotFoundError.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDriverAvailabilityErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDriverAvailabilityErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.unexpectedError, () => message.unexpectedError = ErrorResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.driverNotFoundError, () => message.driverNotFoundError = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDriverAvailabilityErrorResponse {
            return GetDriverAvailabilityErrorResponse.deserialize(bytes);
        }
    }
    export class GetDriverAvailabilityOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driverAvailability?: DriverAvailability;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driverAvailability" in data && data.driverAvailability != undefined) {
                    this.driverAvailability = data.driverAvailability;
                }
            }
        }
        get driverAvailability() {
            return pb_1.Message.getWrapperField(this, DriverAvailability, 1) as DriverAvailability;
        }
        set driverAvailability(value: DriverAvailability) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_driverAvailability() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            driverAvailability?: ReturnType<typeof DriverAvailability.prototype.toObject>;
        }): GetDriverAvailabilityOKResponse {
            const message = new GetDriverAvailabilityOKResponse({});
            if (data.driverAvailability != null) {
                message.driverAvailability = DriverAvailability.fromObject(data.driverAvailability);
            }
            return message;
        }
        toObject() {
            const data: {
                driverAvailability?: ReturnType<typeof DriverAvailability.prototype.toObject>;
            } = {};
            if (this.driverAvailability != null) {
                data.driverAvailability = this.driverAvailability.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_driverAvailability)
                writer.writeMessage(1, this.driverAvailability, () => this.driverAvailability.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDriverAvailabilityOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDriverAvailabilityOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.driverAvailability, () => message.driverAvailability = DriverAvailability.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDriverAvailabilityOKResponse {
            return GetDriverAvailabilityOKResponse.deserialize(bytes);
        }
    }
    export class DriverAvailability extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            accountStatus?: AccountStatus;
            availabilityStatus?: AvailabilityStatus;
            blockReason?: BlockReason;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("accountStatus" in data && data.accountStatus != undefined) {
                    this.accountStatus = data.accountStatus;
                }
                if ("availabilityStatus" in data && data.availabilityStatus != undefined) {
                    this.availabilityStatus = data.availabilityStatus;
                }
                if ("blockReason" in data && data.blockReason != undefined) {
                    this.blockReason = data.blockReason;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get accountStatus() {
            return pb_1.Message.getWrapperField(this, AccountStatus, 2) as AccountStatus;
        }
        set accountStatus(value: AccountStatus) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_accountStatus() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get availabilityStatus() {
            return pb_1.Message.getWrapperField(this, AvailabilityStatus, 3) as AvailabilityStatus;
        }
        set availabilityStatus(value: AvailabilityStatus) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_availabilityStatus() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get blockReason() {
            return pb_1.Message.getWrapperField(this, BlockReason, 4) as BlockReason;
        }
        set blockReason(value: BlockReason) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_blockReason() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            accountStatus?: ReturnType<typeof AccountStatus.prototype.toObject>;
            availabilityStatus?: ReturnType<typeof AvailabilityStatus.prototype.toObject>;
            blockReason?: ReturnType<typeof BlockReason.prototype.toObject>;
        }): DriverAvailability {
            const message = new DriverAvailability({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.accountStatus != null) {
                message.accountStatus = AccountStatus.fromObject(data.accountStatus);
            }
            if (data.availabilityStatus != null) {
                message.availabilityStatus = AvailabilityStatus.fromObject(data.availabilityStatus);
            }
            if (data.blockReason != null) {
                message.blockReason = BlockReason.fromObject(data.blockReason);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                accountStatus?: ReturnType<typeof AccountStatus.prototype.toObject>;
                availabilityStatus?: ReturnType<typeof AvailabilityStatus.prototype.toObject>;
                blockReason?: ReturnType<typeof BlockReason.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.accountStatus != null) {
                data.accountStatus = this.accountStatus.toObject();
            }
            if (this.availabilityStatus != null) {
                data.availabilityStatus = this.availabilityStatus.toObject();
            }
            if (this.blockReason != null) {
                data.blockReason = this.blockReason.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_accountStatus)
                writer.writeMessage(2, this.accountStatus, () => this.accountStatus.serialize(writer));
            if (this.has_availabilityStatus)
                writer.writeMessage(3, this.availabilityStatus, () => this.availabilityStatus.serialize(writer));
            if (this.has_blockReason)
                writer.writeMessage(4, this.blockReason, () => this.blockReason.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DriverAvailability {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DriverAvailability();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.accountStatus, () => message.accountStatus = AccountStatus.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.availabilityStatus, () => message.availabilityStatus = AvailabilityStatus.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.blockReason, () => message.blockReason = BlockReason.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DriverAvailability {
            return DriverAvailability.deserialize(bytes);
        }
    }
    export class AccountStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): AccountStatus {
            const message = new AccountStatus({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountStatus {
            return AccountStatus.deserialize(bytes);
        }
    }
    export class AvailabilityStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): AvailabilityStatus {
            const message = new AvailabilityStatus({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AvailabilityStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvailabilityStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AvailabilityStatus {
            return AvailabilityStatus.deserialize(bytes);
        }
    }
    export class BlockReason extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            reason?: string;
        }): BlockReason {
            const message = new BlockReason({});
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                reason?: string;
            } = {};
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reason.length)
                writer.writeString(1, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockReason {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockReason();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockReason {
            return BlockReason.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDriverServiceService {
        static definition = {
            BecomeAvailable: {
                path: "/driver.DriverService/BecomeAvailable",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BecomeAvailableRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BecomeAvailableRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BecomeAvailableResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BecomeAvailableResponse.deserialize(new Uint8Array(bytes))
            },
            BecomeUnavailable: {
                path: "/driver.DriverService/BecomeUnavailable",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BecomeUnavailableRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BecomeUnavailableRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BecomeUnavailableResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BecomeUnavailableResponse.deserialize(new Uint8Array(bytes))
            },
            GetDriverAvailability: {
                path: "/driver.DriverService/GetDriverAvailability",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetDriverAvailabilityRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetDriverAvailabilityRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetDriverAvailabilityResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetDriverAvailabilityResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract BecomeAvailable(call: grpc_1.ServerUnaryCall<BecomeAvailableRequest, BecomeAvailableResponse>, callback: grpc_1.sendUnaryData<BecomeAvailableResponse>): void;
        abstract BecomeUnavailable(call: grpc_1.ServerUnaryCall<BecomeUnavailableRequest, BecomeUnavailableResponse>, callback: grpc_1.sendUnaryData<BecomeUnavailableResponse>): void;
        abstract GetDriverAvailability(call: grpc_1.ServerUnaryCall<GetDriverAvailabilityRequest, GetDriverAvailabilityResponse>, callback: grpc_1.sendUnaryData<GetDriverAvailabilityResponse>): void;
    }
    export class DriverServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDriverServiceService.definition, "DriverService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        BecomeAvailable: GrpcUnaryServiceInterface<BecomeAvailableRequest, BecomeAvailableResponse> = (message: BecomeAvailableRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BecomeAvailableResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BecomeAvailableResponse>, callback?: grpc_1.requestCallback<BecomeAvailableResponse>): grpc_1.ClientUnaryCall => {
            return super.BecomeAvailable(message, metadata, options, callback);
        };
        BecomeUnavailable: GrpcUnaryServiceInterface<BecomeUnavailableRequest, BecomeUnavailableResponse> = (message: BecomeUnavailableRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BecomeUnavailableResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BecomeUnavailableResponse>, callback?: grpc_1.requestCallback<BecomeUnavailableResponse>): grpc_1.ClientUnaryCall => {
            return super.BecomeUnavailable(message, metadata, options, callback);
        };
        GetDriverAvailability: GrpcUnaryServiceInterface<GetDriverAvailabilityRequest, GetDriverAvailabilityResponse> = (message: GetDriverAvailabilityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDriverAvailabilityResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDriverAvailabilityResponse>, callback?: grpc_1.requestCallback<GetDriverAvailabilityResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDriverAvailability(message, metadata, options, callback);
        };
    }
}
