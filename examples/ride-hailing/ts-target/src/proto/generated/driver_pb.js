// source: driver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.driver.AccountStatus', null, global);
goog.exportSymbol('proto.driver.AvailabilityStatus', null, global);
goog.exportSymbol('proto.driver.BecomeAvailableErrorResponse', null, global);
goog.exportSymbol('proto.driver.BecomeAvailableErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.driver.BecomeAvailableOKResponse', null, global);
goog.exportSymbol('proto.driver.BecomeAvailableRequest', null, global);
goog.exportSymbol('proto.driver.BecomeAvailableResponse', null, global);
goog.exportSymbol('proto.driver.BecomeAvailableResponse.ResultCase', null, global);
goog.exportSymbol('proto.driver.BecomeUnavailableErrorResponse', null, global);
goog.exportSymbol('proto.driver.BecomeUnavailableErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.driver.BecomeUnavailableOKResponse', null, global);
goog.exportSymbol('proto.driver.BecomeUnavailableRequest', null, global);
goog.exportSymbol('proto.driver.BecomeUnavailableResponse', null, global);
goog.exportSymbol('proto.driver.BecomeUnavailableResponse.ResultCase', null, global);
goog.exportSymbol('proto.driver.BlockReason', null, global);
goog.exportSymbol('proto.driver.DriverAvailability', null, global);
goog.exportSymbol('proto.driver.ErrorResponse', null, global);
goog.exportSymbol('proto.driver.GetDriverAvailabilityErrorResponse', null, global);
goog.exportSymbol('proto.driver.GetDriverAvailabilityErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.driver.GetDriverAvailabilityOKResponse', null, global);
goog.exportSymbol('proto.driver.GetDriverAvailabilityRequest', null, global);
goog.exportSymbol('proto.driver.GetDriverAvailabilityResponse', null, global);
goog.exportSymbol('proto.driver.GetDriverAvailabilityResponse.ResultCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.ErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.ErrorResponse.displayName = 'proto.driver.ErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeAvailableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.BecomeAvailableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeAvailableRequest.displayName = 'proto.driver.BecomeAvailableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeAvailableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.BecomeAvailableResponse.oneofGroups_);
};
goog.inherits(proto.driver.BecomeAvailableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeAvailableResponse.displayName = 'proto.driver.BecomeAvailableResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeAvailableErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.BecomeAvailableErrorResponse.oneofGroups_);
};
goog.inherits(proto.driver.BecomeAvailableErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeAvailableErrorResponse.displayName = 'proto.driver.BecomeAvailableErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeAvailableOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.BecomeAvailableOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeAvailableOKResponse.displayName = 'proto.driver.BecomeAvailableOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeUnavailableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.BecomeUnavailableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeUnavailableRequest.displayName = 'proto.driver.BecomeUnavailableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeUnavailableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.BecomeUnavailableResponse.oneofGroups_);
};
goog.inherits(proto.driver.BecomeUnavailableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeUnavailableResponse.displayName = 'proto.driver.BecomeUnavailableResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeUnavailableErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.BecomeUnavailableErrorResponse.oneofGroups_);
};
goog.inherits(proto.driver.BecomeUnavailableErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeUnavailableErrorResponse.displayName = 'proto.driver.BecomeUnavailableErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BecomeUnavailableOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.BecomeUnavailableOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BecomeUnavailableOKResponse.displayName = 'proto.driver.BecomeUnavailableOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.GetDriverAvailabilityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.GetDriverAvailabilityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.GetDriverAvailabilityRequest.displayName = 'proto.driver.GetDriverAvailabilityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.GetDriverAvailabilityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.GetDriverAvailabilityResponse.oneofGroups_);
};
goog.inherits(proto.driver.GetDriverAvailabilityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.GetDriverAvailabilityResponse.displayName = 'proto.driver.GetDriverAvailabilityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.GetDriverAvailabilityErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.GetDriverAvailabilityErrorResponse.oneofGroups_);
};
goog.inherits(proto.driver.GetDriverAvailabilityErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.GetDriverAvailabilityErrorResponse.displayName = 'proto.driver.GetDriverAvailabilityErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.GetDriverAvailabilityOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.GetDriverAvailabilityOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.GetDriverAvailabilityOKResponse.displayName = 'proto.driver.GetDriverAvailabilityOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.DriverAvailability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.DriverAvailability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.DriverAvailability.displayName = 'proto.driver.DriverAvailability';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.AccountStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.AccountStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.AccountStatus.displayName = 'proto.driver.AccountStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.AvailabilityStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.AvailabilityStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.AvailabilityStatus.displayName = 'proto.driver.AvailabilityStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.BlockReason = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.BlockReason, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.BlockReason.displayName = 'proto.driver.BlockReason';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.ErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.ErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.ErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.ErrorResponse}
 */
proto.driver.ErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.ErrorResponse;
  return proto.driver.ErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.ErrorResponse}
 */
proto.driver.ErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.ErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.ErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.driver.ErrorResponse.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.ErrorResponse} returns this
 */
proto.driver.ErrorResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.driver.ErrorResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.ErrorResponse} returns this
 */
proto.driver.ErrorResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeAvailableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeAvailableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeAvailableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeAvailableRequest}
 */
proto.driver.BecomeAvailableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeAvailableRequest;
  return proto.driver.BecomeAvailableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeAvailableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeAvailableRequest}
 */
proto.driver.BecomeAvailableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeAvailableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeAvailableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeAvailableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.driver.BecomeAvailableRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.BecomeAvailableRequest} returns this
 */
proto.driver.BecomeAvailableRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.BecomeAvailableResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.driver.BecomeAvailableResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.driver.BecomeAvailableResponse.ResultCase}
 */
proto.driver.BecomeAvailableResponse.prototype.getResultCase = function() {
  return /** @type {proto.driver.BecomeAvailableResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.driver.BecomeAvailableResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeAvailableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeAvailableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeAvailableResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.driver.BecomeAvailableOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.driver.BecomeAvailableErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeAvailableResponse}
 */
proto.driver.BecomeAvailableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeAvailableResponse;
  return proto.driver.BecomeAvailableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeAvailableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeAvailableResponse}
 */
proto.driver.BecomeAvailableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.BecomeAvailableOKResponse;
      reader.readMessage(value,proto.driver.BecomeAvailableOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.driver.BecomeAvailableErrorResponse;
      reader.readMessage(value,proto.driver.BecomeAvailableErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeAvailableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeAvailableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeAvailableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.BecomeAvailableOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.BecomeAvailableErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional BecomeAvailableOKResponse ok = 1;
 * @return {?proto.driver.BecomeAvailableOKResponse}
 */
proto.driver.BecomeAvailableResponse.prototype.getOk = function() {
  return /** @type{?proto.driver.BecomeAvailableOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.BecomeAvailableOKResponse, 1));
};


/**
 * @param {?proto.driver.BecomeAvailableOKResponse|undefined} value
 * @return {!proto.driver.BecomeAvailableResponse} returns this
*/
proto.driver.BecomeAvailableResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.BecomeAvailableResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeAvailableResponse} returns this
 */
proto.driver.BecomeAvailableResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeAvailableResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BecomeAvailableErrorResponse error = 2;
 * @return {?proto.driver.BecomeAvailableErrorResponse}
 */
proto.driver.BecomeAvailableResponse.prototype.getError = function() {
  return /** @type{?proto.driver.BecomeAvailableErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.BecomeAvailableErrorResponse, 2));
};


/**
 * @param {?proto.driver.BecomeAvailableErrorResponse|undefined} value
 * @return {!proto.driver.BecomeAvailableResponse} returns this
*/
proto.driver.BecomeAvailableResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.BecomeAvailableResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeAvailableResponse} returns this
 */
proto.driver.BecomeAvailableResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeAvailableResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.BecomeAvailableErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.driver.BecomeAvailableErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNEXPECTEDERROR: 1,
  ACCOUNTISBLOCKEDERROR: 2,
  DRIVERNOTFOUNDERROR: 3
};

/**
 * @return {proto.driver.BecomeAvailableErrorResponse.ErrorCase}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.driver.BecomeAvailableErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.driver.BecomeAvailableErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeAvailableErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeAvailableErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unexpectederror: (f = msg.getUnexpectederror()) && proto.driver.ErrorResponse.toObject(includeInstance, f),
    accountisblockederror: (f = msg.getAccountisblockederror()) && proto.driver.ErrorResponse.toObject(includeInstance, f),
    drivernotfounderror: (f = msg.getDrivernotfounderror()) && proto.driver.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeAvailableErrorResponse}
 */
proto.driver.BecomeAvailableErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeAvailableErrorResponse;
  return proto.driver.BecomeAvailableErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeAvailableErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeAvailableErrorResponse}
 */
proto.driver.BecomeAvailableErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.ErrorResponse;
      reader.readMessage(value,proto.driver.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnexpectederror(value);
      break;
    case 2:
      var value = new proto.driver.ErrorResponse;
      reader.readMessage(value,proto.driver.ErrorResponse.deserializeBinaryFromReader);
      msg.setAccountisblockederror(value);
      break;
    case 3:
      var value = new proto.driver.ErrorResponse;
      reader.readMessage(value,proto.driver.ErrorResponse.deserializeBinaryFromReader);
      msg.setDrivernotfounderror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeAvailableErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeAvailableErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnexpectederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getAccountisblockederror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getDrivernotfounderror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.driver.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unexpectedError = 1;
 * @return {?proto.driver.ErrorResponse}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.getUnexpectederror = function() {
  return /** @type{?proto.driver.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.ErrorResponse, 1));
};


/**
 * @param {?proto.driver.ErrorResponse|undefined} value
 * @return {!proto.driver.BecomeAvailableErrorResponse} returns this
*/
proto.driver.BecomeAvailableErrorResponse.prototype.setUnexpectederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.BecomeAvailableErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeAvailableErrorResponse} returns this
 */
proto.driver.BecomeAvailableErrorResponse.prototype.clearUnexpectederror = function() {
  return this.setUnexpectederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.hasUnexpectederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse accountIsBlockedError = 2;
 * @return {?proto.driver.ErrorResponse}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.getAccountisblockederror = function() {
  return /** @type{?proto.driver.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.ErrorResponse, 2));
};


/**
 * @param {?proto.driver.ErrorResponse|undefined} value
 * @return {!proto.driver.BecomeAvailableErrorResponse} returns this
*/
proto.driver.BecomeAvailableErrorResponse.prototype.setAccountisblockederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.BecomeAvailableErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeAvailableErrorResponse} returns this
 */
proto.driver.BecomeAvailableErrorResponse.prototype.clearAccountisblockederror = function() {
  return this.setAccountisblockederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.hasAccountisblockederror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse driverNotFoundError = 3;
 * @return {?proto.driver.ErrorResponse}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.getDrivernotfounderror = function() {
  return /** @type{?proto.driver.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.ErrorResponse, 3));
};


/**
 * @param {?proto.driver.ErrorResponse|undefined} value
 * @return {!proto.driver.BecomeAvailableErrorResponse} returns this
*/
proto.driver.BecomeAvailableErrorResponse.prototype.setDrivernotfounderror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.driver.BecomeAvailableErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeAvailableErrorResponse} returns this
 */
proto.driver.BecomeAvailableErrorResponse.prototype.clearDrivernotfounderror = function() {
  return this.setDrivernotfounderror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeAvailableErrorResponse.prototype.hasDrivernotfounderror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeAvailableOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeAvailableOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeAvailableOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeAvailableOKResponse}
 */
proto.driver.BecomeAvailableOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeAvailableOKResponse;
  return proto.driver.BecomeAvailableOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeAvailableOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeAvailableOKResponse}
 */
proto.driver.BecomeAvailableOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeAvailableOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeAvailableOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeAvailableOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeAvailableOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeUnavailableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeUnavailableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeUnavailableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeUnavailableRequest}
 */
proto.driver.BecomeUnavailableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeUnavailableRequest;
  return proto.driver.BecomeUnavailableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeUnavailableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeUnavailableRequest}
 */
proto.driver.BecomeUnavailableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeUnavailableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeUnavailableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeUnavailableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.driver.BecomeUnavailableRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.BecomeUnavailableRequest} returns this
 */
proto.driver.BecomeUnavailableRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.BecomeUnavailableResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.driver.BecomeUnavailableResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.driver.BecomeUnavailableResponse.ResultCase}
 */
proto.driver.BecomeUnavailableResponse.prototype.getResultCase = function() {
  return /** @type {proto.driver.BecomeUnavailableResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.driver.BecomeUnavailableResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeUnavailableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeUnavailableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeUnavailableResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.driver.BecomeUnavailableOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.driver.BecomeUnavailableErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeUnavailableResponse}
 */
proto.driver.BecomeUnavailableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeUnavailableResponse;
  return proto.driver.BecomeUnavailableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeUnavailableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeUnavailableResponse}
 */
proto.driver.BecomeUnavailableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.BecomeUnavailableOKResponse;
      reader.readMessage(value,proto.driver.BecomeUnavailableOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.driver.BecomeUnavailableErrorResponse;
      reader.readMessage(value,proto.driver.BecomeUnavailableErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeUnavailableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeUnavailableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeUnavailableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.BecomeUnavailableOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.BecomeUnavailableErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional BecomeUnavailableOKResponse ok = 1;
 * @return {?proto.driver.BecomeUnavailableOKResponse}
 */
proto.driver.BecomeUnavailableResponse.prototype.getOk = function() {
  return /** @type{?proto.driver.BecomeUnavailableOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.BecomeUnavailableOKResponse, 1));
};


/**
 * @param {?proto.driver.BecomeUnavailableOKResponse|undefined} value
 * @return {!proto.driver.BecomeUnavailableResponse} returns this
*/
proto.driver.BecomeUnavailableResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.BecomeUnavailableResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeUnavailableResponse} returns this
 */
proto.driver.BecomeUnavailableResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeUnavailableResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BecomeUnavailableErrorResponse error = 2;
 * @return {?proto.driver.BecomeUnavailableErrorResponse}
 */
proto.driver.BecomeUnavailableResponse.prototype.getError = function() {
  return /** @type{?proto.driver.BecomeUnavailableErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.BecomeUnavailableErrorResponse, 2));
};


/**
 * @param {?proto.driver.BecomeUnavailableErrorResponse|undefined} value
 * @return {!proto.driver.BecomeUnavailableResponse} returns this
*/
proto.driver.BecomeUnavailableResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.BecomeUnavailableResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeUnavailableResponse} returns this
 */
proto.driver.BecomeUnavailableResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeUnavailableResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.BecomeUnavailableErrorResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.driver.BecomeUnavailableErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNEXPECTEDERROR: 1,
  DRIVERNOTFOUNDERROR: 2
};

/**
 * @return {proto.driver.BecomeUnavailableErrorResponse.ErrorCase}
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.driver.BecomeUnavailableErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.driver.BecomeUnavailableErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeUnavailableErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeUnavailableErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unexpectederror: (f = msg.getUnexpectederror()) && proto.driver.ErrorResponse.toObject(includeInstance, f),
    drivernotfounderror: (f = msg.getDrivernotfounderror()) && proto.driver.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeUnavailableErrorResponse}
 */
proto.driver.BecomeUnavailableErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeUnavailableErrorResponse;
  return proto.driver.BecomeUnavailableErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeUnavailableErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeUnavailableErrorResponse}
 */
proto.driver.BecomeUnavailableErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.ErrorResponse;
      reader.readMessage(value,proto.driver.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnexpectederror(value);
      break;
    case 2:
      var value = new proto.driver.ErrorResponse;
      reader.readMessage(value,proto.driver.ErrorResponse.deserializeBinaryFromReader);
      msg.setDrivernotfounderror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeUnavailableErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeUnavailableErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnexpectederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getDrivernotfounderror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unexpectedError = 1;
 * @return {?proto.driver.ErrorResponse}
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.getUnexpectederror = function() {
  return /** @type{?proto.driver.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.ErrorResponse, 1));
};


/**
 * @param {?proto.driver.ErrorResponse|undefined} value
 * @return {!proto.driver.BecomeUnavailableErrorResponse} returns this
*/
proto.driver.BecomeUnavailableErrorResponse.prototype.setUnexpectederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.BecomeUnavailableErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeUnavailableErrorResponse} returns this
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.clearUnexpectederror = function() {
  return this.setUnexpectederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.hasUnexpectederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse driverNotFoundError = 2;
 * @return {?proto.driver.ErrorResponse}
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.getDrivernotfounderror = function() {
  return /** @type{?proto.driver.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.ErrorResponse, 2));
};


/**
 * @param {?proto.driver.ErrorResponse|undefined} value
 * @return {!proto.driver.BecomeUnavailableErrorResponse} returns this
*/
proto.driver.BecomeUnavailableErrorResponse.prototype.setDrivernotfounderror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.BecomeUnavailableErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BecomeUnavailableErrorResponse} returns this
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.clearDrivernotfounderror = function() {
  return this.setDrivernotfounderror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BecomeUnavailableErrorResponse.prototype.hasDrivernotfounderror = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BecomeUnavailableOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BecomeUnavailableOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BecomeUnavailableOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BecomeUnavailableOKResponse}
 */
proto.driver.BecomeUnavailableOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BecomeUnavailableOKResponse;
  return proto.driver.BecomeUnavailableOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BecomeUnavailableOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BecomeUnavailableOKResponse}
 */
proto.driver.BecomeUnavailableOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BecomeUnavailableOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BecomeUnavailableOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BecomeUnavailableOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BecomeUnavailableOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.GetDriverAvailabilityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.GetDriverAvailabilityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.GetDriverAvailabilityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.GetDriverAvailabilityRequest}
 */
proto.driver.GetDriverAvailabilityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.GetDriverAvailabilityRequest;
  return proto.driver.GetDriverAvailabilityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.GetDriverAvailabilityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.GetDriverAvailabilityRequest}
 */
proto.driver.GetDriverAvailabilityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.GetDriverAvailabilityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.GetDriverAvailabilityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.GetDriverAvailabilityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.driver.GetDriverAvailabilityRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.GetDriverAvailabilityRequest} returns this
 */
proto.driver.GetDriverAvailabilityRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.GetDriverAvailabilityResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.driver.GetDriverAvailabilityResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.driver.GetDriverAvailabilityResponse.ResultCase}
 */
proto.driver.GetDriverAvailabilityResponse.prototype.getResultCase = function() {
  return /** @type {proto.driver.GetDriverAvailabilityResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.driver.GetDriverAvailabilityResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.GetDriverAvailabilityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.GetDriverAvailabilityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.GetDriverAvailabilityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.driver.GetDriverAvailabilityOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.driver.GetDriverAvailabilityErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.GetDriverAvailabilityResponse}
 */
proto.driver.GetDriverAvailabilityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.GetDriverAvailabilityResponse;
  return proto.driver.GetDriverAvailabilityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.GetDriverAvailabilityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.GetDriverAvailabilityResponse}
 */
proto.driver.GetDriverAvailabilityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.GetDriverAvailabilityOKResponse;
      reader.readMessage(value,proto.driver.GetDriverAvailabilityOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.driver.GetDriverAvailabilityErrorResponse;
      reader.readMessage(value,proto.driver.GetDriverAvailabilityErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.GetDriverAvailabilityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.GetDriverAvailabilityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.GetDriverAvailabilityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.GetDriverAvailabilityOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.GetDriverAvailabilityErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetDriverAvailabilityOKResponse ok = 1;
 * @return {?proto.driver.GetDriverAvailabilityOKResponse}
 */
proto.driver.GetDriverAvailabilityResponse.prototype.getOk = function() {
  return /** @type{?proto.driver.GetDriverAvailabilityOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.GetDriverAvailabilityOKResponse, 1));
};


/**
 * @param {?proto.driver.GetDriverAvailabilityOKResponse|undefined} value
 * @return {!proto.driver.GetDriverAvailabilityResponse} returns this
*/
proto.driver.GetDriverAvailabilityResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.GetDriverAvailabilityResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.GetDriverAvailabilityResponse} returns this
 */
proto.driver.GetDriverAvailabilityResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.GetDriverAvailabilityResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetDriverAvailabilityErrorResponse error = 2;
 * @return {?proto.driver.GetDriverAvailabilityErrorResponse}
 */
proto.driver.GetDriverAvailabilityResponse.prototype.getError = function() {
  return /** @type{?proto.driver.GetDriverAvailabilityErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.GetDriverAvailabilityErrorResponse, 2));
};


/**
 * @param {?proto.driver.GetDriverAvailabilityErrorResponse|undefined} value
 * @return {!proto.driver.GetDriverAvailabilityResponse} returns this
*/
proto.driver.GetDriverAvailabilityResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.GetDriverAvailabilityResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.GetDriverAvailabilityResponse} returns this
 */
proto.driver.GetDriverAvailabilityResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.GetDriverAvailabilityResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.GetDriverAvailabilityErrorResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.driver.GetDriverAvailabilityErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNEXPECTEDERROR: 1,
  DRIVERNOTFOUNDERROR: 2
};

/**
 * @return {proto.driver.GetDriverAvailabilityErrorResponse.ErrorCase}
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.driver.GetDriverAvailabilityErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.driver.GetDriverAvailabilityErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.GetDriverAvailabilityErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.GetDriverAvailabilityErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unexpectederror: (f = msg.getUnexpectederror()) && proto.driver.ErrorResponse.toObject(includeInstance, f),
    drivernotfounderror: (f = msg.getDrivernotfounderror()) && proto.driver.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.GetDriverAvailabilityErrorResponse}
 */
proto.driver.GetDriverAvailabilityErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.GetDriverAvailabilityErrorResponse;
  return proto.driver.GetDriverAvailabilityErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.GetDriverAvailabilityErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.GetDriverAvailabilityErrorResponse}
 */
proto.driver.GetDriverAvailabilityErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.ErrorResponse;
      reader.readMessage(value,proto.driver.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnexpectederror(value);
      break;
    case 2:
      var value = new proto.driver.ErrorResponse;
      reader.readMessage(value,proto.driver.ErrorResponse.deserializeBinaryFromReader);
      msg.setDrivernotfounderror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.GetDriverAvailabilityErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.GetDriverAvailabilityErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnexpectederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getDrivernotfounderror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unexpectedError = 1;
 * @return {?proto.driver.ErrorResponse}
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.getUnexpectederror = function() {
  return /** @type{?proto.driver.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.ErrorResponse, 1));
};


/**
 * @param {?proto.driver.ErrorResponse|undefined} value
 * @return {!proto.driver.GetDriverAvailabilityErrorResponse} returns this
*/
proto.driver.GetDriverAvailabilityErrorResponse.prototype.setUnexpectederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.GetDriverAvailabilityErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.GetDriverAvailabilityErrorResponse} returns this
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.clearUnexpectederror = function() {
  return this.setUnexpectederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.hasUnexpectederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse driverNotFoundError = 2;
 * @return {?proto.driver.ErrorResponse}
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.getDrivernotfounderror = function() {
  return /** @type{?proto.driver.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.driver.ErrorResponse, 2));
};


/**
 * @param {?proto.driver.ErrorResponse|undefined} value
 * @return {!proto.driver.GetDriverAvailabilityErrorResponse} returns this
*/
proto.driver.GetDriverAvailabilityErrorResponse.prototype.setDrivernotfounderror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.GetDriverAvailabilityErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.GetDriverAvailabilityErrorResponse} returns this
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.clearDrivernotfounderror = function() {
  return this.setDrivernotfounderror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.GetDriverAvailabilityErrorResponse.prototype.hasDrivernotfounderror = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.GetDriverAvailabilityOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.GetDriverAvailabilityOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.GetDriverAvailabilityOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    driveravailability: (f = msg.getDriveravailability()) && proto.driver.DriverAvailability.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.GetDriverAvailabilityOKResponse}
 */
proto.driver.GetDriverAvailabilityOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.GetDriverAvailabilityOKResponse;
  return proto.driver.GetDriverAvailabilityOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.GetDriverAvailabilityOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.GetDriverAvailabilityOKResponse}
 */
proto.driver.GetDriverAvailabilityOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.DriverAvailability;
      reader.readMessage(value,proto.driver.DriverAvailability.deserializeBinaryFromReader);
      msg.setDriveravailability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.GetDriverAvailabilityOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.GetDriverAvailabilityOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.GetDriverAvailabilityOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.GetDriverAvailabilityOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDriveravailability();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.DriverAvailability.serializeBinaryToWriter
    );
  }
};


/**
 * optional DriverAvailability driverAvailability = 1;
 * @return {?proto.driver.DriverAvailability}
 */
proto.driver.GetDriverAvailabilityOKResponse.prototype.getDriveravailability = function() {
  return /** @type{?proto.driver.DriverAvailability} */ (
    jspb.Message.getWrapperField(this, proto.driver.DriverAvailability, 1));
};


/**
 * @param {?proto.driver.DriverAvailability|undefined} value
 * @return {!proto.driver.GetDriverAvailabilityOKResponse} returns this
*/
proto.driver.GetDriverAvailabilityOKResponse.prototype.setDriveravailability = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.GetDriverAvailabilityOKResponse} returns this
 */
proto.driver.GetDriverAvailabilityOKResponse.prototype.clearDriveravailability = function() {
  return this.setDriveravailability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.GetDriverAvailabilityOKResponse.prototype.hasDriveravailability = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.DriverAvailability.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.DriverAvailability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.DriverAvailability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DriverAvailability.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountstatus: (f = msg.getAccountstatus()) && proto.driver.AccountStatus.toObject(includeInstance, f),
    availabilitystatus: (f = msg.getAvailabilitystatus()) && proto.driver.AvailabilityStatus.toObject(includeInstance, f),
    blockreason: (f = msg.getBlockreason()) && proto.driver.BlockReason.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.DriverAvailability}
 */
proto.driver.DriverAvailability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.DriverAvailability;
  return proto.driver.DriverAvailability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.DriverAvailability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.DriverAvailability}
 */
proto.driver.DriverAvailability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.driver.AccountStatus;
      reader.readMessage(value,proto.driver.AccountStatus.deserializeBinaryFromReader);
      msg.setAccountstatus(value);
      break;
    case 3:
      var value = new proto.driver.AvailabilityStatus;
      reader.readMessage(value,proto.driver.AvailabilityStatus.deserializeBinaryFromReader);
      msg.setAvailabilitystatus(value);
      break;
    case 4:
      var value = new proto.driver.BlockReason;
      reader.readMessage(value,proto.driver.BlockReason.deserializeBinaryFromReader);
      msg.setBlockreason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.DriverAvailability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.DriverAvailability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.DriverAvailability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DriverAvailability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountstatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.AccountStatus.serializeBinaryToWriter
    );
  }
  f = message.getAvailabilitystatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.driver.AvailabilityStatus.serializeBinaryToWriter
    );
  }
  f = message.getBlockreason();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.driver.BlockReason.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.driver.DriverAvailability.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.DriverAvailability} returns this
 */
proto.driver.DriverAvailability.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AccountStatus accountStatus = 2;
 * @return {?proto.driver.AccountStatus}
 */
proto.driver.DriverAvailability.prototype.getAccountstatus = function() {
  return /** @type{?proto.driver.AccountStatus} */ (
    jspb.Message.getWrapperField(this, proto.driver.AccountStatus, 2));
};


/**
 * @param {?proto.driver.AccountStatus|undefined} value
 * @return {!proto.driver.DriverAvailability} returns this
*/
proto.driver.DriverAvailability.prototype.setAccountstatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DriverAvailability} returns this
 */
proto.driver.DriverAvailability.prototype.clearAccountstatus = function() {
  return this.setAccountstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DriverAvailability.prototype.hasAccountstatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AvailabilityStatus availabilityStatus = 3;
 * @return {?proto.driver.AvailabilityStatus}
 */
proto.driver.DriverAvailability.prototype.getAvailabilitystatus = function() {
  return /** @type{?proto.driver.AvailabilityStatus} */ (
    jspb.Message.getWrapperField(this, proto.driver.AvailabilityStatus, 3));
};


/**
 * @param {?proto.driver.AvailabilityStatus|undefined} value
 * @return {!proto.driver.DriverAvailability} returns this
*/
proto.driver.DriverAvailability.prototype.setAvailabilitystatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DriverAvailability} returns this
 */
proto.driver.DriverAvailability.prototype.clearAvailabilitystatus = function() {
  return this.setAvailabilitystatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DriverAvailability.prototype.hasAvailabilitystatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BlockReason blockReason = 4;
 * @return {?proto.driver.BlockReason}
 */
proto.driver.DriverAvailability.prototype.getBlockreason = function() {
  return /** @type{?proto.driver.BlockReason} */ (
    jspb.Message.getWrapperField(this, proto.driver.BlockReason, 4));
};


/**
 * @param {?proto.driver.BlockReason|undefined} value
 * @return {!proto.driver.DriverAvailability} returns this
*/
proto.driver.DriverAvailability.prototype.setBlockreason = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DriverAvailability} returns this
 */
proto.driver.DriverAvailability.prototype.clearBlockreason = function() {
  return this.setBlockreason(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DriverAvailability.prototype.hasBlockreason = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.AccountStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.AccountStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.AccountStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.AccountStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    isverified: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.AccountStatus}
 */
proto.driver.AccountStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.AccountStatus;
  return proto.driver.AccountStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.AccountStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.AccountStatus}
 */
proto.driver.AccountStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsverified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.AccountStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.AccountStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.AccountStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.AccountStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIsverified();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool isActive = 1;
 * @return {boolean}
 */
proto.driver.AccountStatus.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.driver.AccountStatus} returns this
 */
proto.driver.AccountStatus.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool isVerified = 2;
 * @return {boolean}
 */
proto.driver.AccountStatus.prototype.getIsverified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.driver.AccountStatus} returns this
 */
proto.driver.AccountStatus.prototype.setIsverified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.AvailabilityStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.AvailabilityStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.AvailabilityStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.AvailabilityStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    isavailable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    lastchangedat: (f = msg.getLastchangedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.AvailabilityStatus}
 */
proto.driver.AvailabilityStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.AvailabilityStatus;
  return proto.driver.AvailabilityStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.AvailabilityStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.AvailabilityStatus}
 */
proto.driver.AvailabilityStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsavailable(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastchangedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.AvailabilityStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.AvailabilityStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.AvailabilityStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.AvailabilityStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsavailable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLastchangedat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isAvailable = 1;
 * @return {boolean}
 */
proto.driver.AvailabilityStatus.prototype.getIsavailable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.driver.AvailabilityStatus} returns this
 */
proto.driver.AvailabilityStatus.prototype.setIsavailable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp lastChangedAt = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.driver.AvailabilityStatus.prototype.getLastchangedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.driver.AvailabilityStatus} returns this
*/
proto.driver.AvailabilityStatus.prototype.setLastchangedat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.AvailabilityStatus} returns this
 */
proto.driver.AvailabilityStatus.prototype.clearLastchangedat = function() {
  return this.setLastchangedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.AvailabilityStatus.prototype.hasLastchangedat = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.BlockReason.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.BlockReason.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.BlockReason} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BlockReason.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockedat: (f = msg.getBlockedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.BlockReason}
 */
proto.driver.BlockReason.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.BlockReason;
  return proto.driver.BlockReason.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.BlockReason} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.BlockReason}
 */
proto.driver.BlockReason.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setBlockedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.BlockReason.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.BlockReason.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.BlockReason} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.BlockReason.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockedat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.driver.BlockReason.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.BlockReason} returns this
 */
proto.driver.BlockReason.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp blockedAt = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.driver.BlockReason.prototype.getBlockedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.driver.BlockReason} returns this
*/
proto.driver.BlockReason.prototype.setBlockedat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.BlockReason} returns this
 */
proto.driver.BlockReason.prototype.clearBlockedat = function() {
  return this.setBlockedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.BlockReason.prototype.hasBlockedat = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.driver);
