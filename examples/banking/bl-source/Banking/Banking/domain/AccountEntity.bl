Props AccountProps {
    optional UUIDv4 id;
    MoneyVO balance;
}


Root Entity AccountEntity {
    static create(props: AccountProps): (OK(AccountEntity), Errors())  {
        props.value = 1 
        const account = AccountEntity(props);
        const isNew = props.id != null;
        if (isNew) {
            account.addDomainEvent(AccountCreatedDomainEvent);
        }
        return account;
    }

    withdrawAmount(amount: int32): (OK(void), Errors(DomainErrors.InvalidMonetaryValue | DomainErrors.InsufficientBalance)) {
        const amountToBeWithdrawn = MoneyVO.create({ 
            amount: amount,
            currency: this.balance.currency,
        });
        const finalAmount = this.balance.amount - amount;
        applyRules(AccountCannotHaveNegativeBalanceRule(finalAmount, this.balance.amount));

        const balanceVO = MoneyVO.create({
            amount: finalAmount,
            currency: this.balance.currency,
        });
        this.balance = balanceVO;
        this.addDomainEvent(MoneyWithdrawnFromAccountDomainEvent);
    }

}