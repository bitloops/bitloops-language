Props PINProps {
    string pin;
}

ValueObject PINVO {
    static create(props: PINProps): (OK(PINVO), Errors(DomainErrors.PINIsNotPositiveNumberError | DomainErrors.InvalidCustomerPINError)) { //Error at the end could be cut?
        applyRules(PINIsPositiveNumberRule(props.pin),PINHasLengthOfFourRule(props.pin));
    }
}

Props MoneyProps {
    StandardVO.Currency currency; 
    float amount; 
}

ValueObject MoneyVO {
    static create(props: PINProps): (OK(MoneyVO), Errors(DomainErrors.InvalidMonetaryValueError /*| StandardVO.Currency.Errors*/)) {
        applyRules(AmountIsPositiveNumberRule(props.amount.toString()), AmountOutOfBoundsRule(props.amount))
    }
    //only private methods inside valueObject declaration?
    private deduct(amount: MoneyVO): (OK(MoneyVO), Errors(DomainErrors.InvalidMonetaryValueError)) {
        if (!this.currency.equals(amount.currency)) {
            return Errors(DomainErrors.InvalidMonetaryValueError);
        }
        const value = this.amount - amount.amount;
        return MoneyVO.create({ amount: value, currency: this.currency }); 
    }
}

Props EmailProps {
    string email;
}

ValueObject EmailVO {
    static create(props: EmailProps): (OK(EmailVO), Errors(DomainErrors.InvalidEmailError)) {
        applyRules(ValidEmailRule(props.email));
    }
}

ReadModel CustomerReadModel {
    string id;
    string email;
    string accoundId;
}

Struct Balance {
    string currency;
    float amount;
}

ReadModel AccountReadModel {
    string id;
    Balance balance;
} // Balance needs to be declared as struct first

Props AccountIdProps {
    string id;
}

ValueObject AccoundIdVO {
    static create(props: AccountIdProps):(OK(AccountIdVO),Errors()) {};
}

Props AccountProps {
    optional UUIDv4 id;
    MoneyVO balance;
    int32 version; 
}




