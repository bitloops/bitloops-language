/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.3
 * source: todo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace todo {
    export enum TODO_EVENTS {
        ADDED = 0,
        COMPLETED = 1,
        DELETED = 2,
        MODIFIED_TITLE = 3,
        UNCOMPLETED = 4
    }
    export class InitializeConnectionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): InitializeConnectionRequest {
            const message = new InitializeConnectionRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeConnectionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeConnectionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitializeConnectionRequest {
            return InitializeConnectionRequest.deserialize(bytes);
        }
    }
    export class InitializeConnectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subscriberId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subscriberId" in data && data.subscriberId != undefined) {
                    this.subscriberId = data.subscriberId;
                }
            }
        }
        get subscriberId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set subscriberId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            subscriberId?: string;
        }): InitializeConnectionResponse {
            const message = new InitializeConnectionResponse({});
            if (data.subscriberId != null) {
                message.subscriberId = data.subscriberId;
            }
            return message;
        }
        toObject() {
            const data: {
                subscriberId?: string;
            } = {};
            if (this.subscriberId != null) {
                data.subscriberId = this.subscriberId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subscriberId.length)
                writer.writeString(1, this.subscriberId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeConnectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeConnectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subscriberId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitializeConnectionResponse {
            return InitializeConnectionResponse.deserialize(bytes);
        }
    }
    export class KeepSubscriptionAliveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subscriberId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subscriberId" in data && data.subscriberId != undefined) {
                    this.subscriberId = data.subscriberId;
                }
            }
        }
        get subscriberId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set subscriberId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            subscriberId?: string;
        }): KeepSubscriptionAliveRequest {
            const message = new KeepSubscriptionAliveRequest({});
            if (data.subscriberId != null) {
                message.subscriberId = data.subscriberId;
            }
            return message;
        }
        toObject() {
            const data: {
                subscriberId?: string;
            } = {};
            if (this.subscriberId != null) {
                data.subscriberId = this.subscriberId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subscriberId.length)
                writer.writeString(1, this.subscriberId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeepSubscriptionAliveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeepSubscriptionAliveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subscriberId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeepSubscriptionAliveRequest {
            return KeepSubscriptionAliveRequest.deserialize(bytes);
        }
    }
    export class KeepSubscriptionAliveResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): KeepSubscriptionAliveResponse {
            const message = new KeepSubscriptionAliveResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeepSubscriptionAliveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeepSubscriptionAliveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeepSubscriptionAliveResponse {
            return KeepSubscriptionAliveResponse.deserialize(bytes);
        }
    }
    export class OnTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subscriberId?: string;
            events?: TODO_EVENTS[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subscriberId" in data && data.subscriberId != undefined) {
                    this.subscriberId = data.subscriberId;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get subscriberId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set subscriberId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get events() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as TODO_EVENTS[];
        }
        set events(value: TODO_EVENTS[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            subscriberId?: string;
            events?: TODO_EVENTS[];
        }): OnTodoRequest {
            const message = new OnTodoRequest({});
            if (data.subscriberId != null) {
                message.subscriberId = data.subscriberId;
            }
            if (data.events != null) {
                message.events = data.events;
            }
            return message;
        }
        toObject() {
            const data: {
                subscriberId?: string;
                events?: TODO_EVENTS[];
            } = {};
            if (this.subscriberId != null) {
                data.subscriberId = this.subscriberId;
            }
            if (this.events != null) {
                data.events = this.events;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subscriberId.length)
                writer.writeString(1, this.subscriberId);
            if (this.events.length)
                writer.writePackedEnum(2, this.events);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subscriberId = reader.readString();
                        break;
                    case 2:
                        message.events = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnTodoRequest {
            return OnTodoRequest.deserialize(bytes);
        }
    }
    export class OnEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            added?: Todo;
            completed?: never;
            deleted?: never;
            modifiedTitle?: never;
            uncompleted?: never;
        } | {
            added?: never;
            completed?: Todo;
            deleted?: never;
            modifiedTitle?: never;
            uncompleted?: never;
        } | {
            added?: never;
            completed?: never;
            deleted?: Todo;
            modifiedTitle?: never;
            uncompleted?: never;
        } | {
            added?: never;
            completed?: never;
            deleted?: never;
            modifiedTitle?: Todo;
            uncompleted?: never;
        } | {
            added?: never;
            completed?: never;
            deleted?: never;
            modifiedTitle?: never;
            uncompleted?: Todo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("added" in data && data.added != undefined) {
                    this.added = data.added;
                }
                if ("completed" in data && data.completed != undefined) {
                    this.completed = data.completed;
                }
                if ("deleted" in data && data.deleted != undefined) {
                    this.deleted = data.deleted;
                }
                if ("modifiedTitle" in data && data.modifiedTitle != undefined) {
                    this.modifiedTitle = data.modifiedTitle;
                }
                if ("uncompleted" in data && data.uncompleted != undefined) {
                    this.uncompleted = data.uncompleted;
                }
            }
        }
        get added() {
            return pb_1.Message.getWrapperField(this, Todo, 1) as Todo;
        }
        set added(value: Todo) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_added() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get completed() {
            return pb_1.Message.getWrapperField(this, Todo, 2) as Todo;
        }
        set completed(value: Todo) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_completed() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get deleted() {
            return pb_1.Message.getWrapperField(this, Todo, 3) as Todo;
        }
        set deleted(value: Todo) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_deleted() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get modifiedTitle() {
            return pb_1.Message.getWrapperField(this, Todo, 4) as Todo;
        }
        set modifiedTitle(value: Todo) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_modifiedTitle() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get uncompleted() {
            return pb_1.Message.getWrapperField(this, Todo, 5) as Todo;
        }
        set uncompleted(value: Todo) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_uncompleted() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get event() {
            const cases: {
                [index: number]: "none" | "added" | "completed" | "deleted" | "modifiedTitle" | "uncompleted";
            } = {
                0: "none",
                1: "added",
                2: "completed",
                3: "deleted",
                4: "modifiedTitle",
                5: "uncompleted"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            added?: ReturnType<typeof Todo.prototype.toObject>;
            completed?: ReturnType<typeof Todo.prototype.toObject>;
            deleted?: ReturnType<typeof Todo.prototype.toObject>;
            modifiedTitle?: ReturnType<typeof Todo.prototype.toObject>;
            uncompleted?: ReturnType<typeof Todo.prototype.toObject>;
        }): OnEvent {
            const message = new OnEvent({});
            if (data.added != null) {
                message.added = Todo.fromObject(data.added);
            }
            if (data.completed != null) {
                message.completed = Todo.fromObject(data.completed);
            }
            if (data.deleted != null) {
                message.deleted = Todo.fromObject(data.deleted);
            }
            if (data.modifiedTitle != null) {
                message.modifiedTitle = Todo.fromObject(data.modifiedTitle);
            }
            if (data.uncompleted != null) {
                message.uncompleted = Todo.fromObject(data.uncompleted);
            }
            return message;
        }
        toObject() {
            const data: {
                added?: ReturnType<typeof Todo.prototype.toObject>;
                completed?: ReturnType<typeof Todo.prototype.toObject>;
                deleted?: ReturnType<typeof Todo.prototype.toObject>;
                modifiedTitle?: ReturnType<typeof Todo.prototype.toObject>;
                uncompleted?: ReturnType<typeof Todo.prototype.toObject>;
            } = {};
            if (this.added != null) {
                data.added = this.added.toObject();
            }
            if (this.completed != null) {
                data.completed = this.completed.toObject();
            }
            if (this.deleted != null) {
                data.deleted = this.deleted.toObject();
            }
            if (this.modifiedTitle != null) {
                data.modifiedTitle = this.modifiedTitle.toObject();
            }
            if (this.uncompleted != null) {
                data.uncompleted = this.uncompleted.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_added)
                writer.writeMessage(1, this.added, () => this.added.serialize(writer));
            if (this.has_completed)
                writer.writeMessage(2, this.completed, () => this.completed.serialize(writer));
            if (this.has_deleted)
                writer.writeMessage(3, this.deleted, () => this.deleted.serialize(writer));
            if (this.has_modifiedTitle)
                writer.writeMessage(4, this.modifiedTitle, () => this.modifiedTitle.serialize(writer));
            if (this.has_uncompleted)
                writer.writeMessage(5, this.uncompleted, () => this.uncompleted.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.added, () => message.added = Todo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.completed, () => message.completed = Todo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.deleted, () => message.deleted = Todo.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.modifiedTitle, () => message.modifiedTitle = Todo.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.uncompleted, () => message.uncompleted = Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnEvent {
            return OnEvent.deserialize(bytes);
        }
    }
    export class ErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: string;
            message?: string;
        }): ErrorResponse {
            const message = new ErrorResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
                message?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorResponse {
            return ErrorResponse.deserialize(bytes);
        }
    }
    export class AddTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            title?: string;
        }): AddTodoRequest {
            const message = new AddTodoRequest({});
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddTodoRequest {
            return AddTodoRequest.deserialize(bytes);
        }
    }
    export class AddTodoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: AddTodoOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, AddTodoOKResponse, 1) as AddTodoOKResponse;
        }
        set ok(value: AddTodoOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof AddTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): AddTodoResponse {
            const message = new AddTodoResponse({});
            if (data.ok != null) {
                message.ok = AddTodoOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof AddTodoOKResponse.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTodoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTodoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = AddTodoOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddTodoResponse {
            return AddTodoResponse.deserialize(bytes);
        }
    }
    export class AddTodoOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): AddTodoOKResponse {
            const message = new AddTodoOKResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTodoOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTodoOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddTodoOKResponse {
            return AddTodoOKResponse.deserialize(bytes);
        }
    }
    export class CompleteTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): CompleteTodoRequest {
            const message = new CompleteTodoRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteTodoRequest {
            return CompleteTodoRequest.deserialize(bytes);
        }
    }
    export class CompleteTodoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: CompleteTodoOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, CompleteTodoOKResponse, 1) as CompleteTodoOKResponse;
        }
        set ok(value: CompleteTodoOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof CompleteTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): CompleteTodoResponse {
            const message = new CompleteTodoResponse({});
            if (data.ok != null) {
                message.ok = CompleteTodoOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof CompleteTodoOKResponse.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteTodoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteTodoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = CompleteTodoOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteTodoResponse {
            return CompleteTodoResponse.deserialize(bytes);
        }
    }
    export class CompleteTodoOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CompleteTodoOKResponse {
            const message = new CompleteTodoOKResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteTodoOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteTodoOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteTodoOKResponse {
            return CompleteTodoOKResponse.deserialize(bytes);
        }
    }
    export class DeleteTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeleteTodoRequest {
            const message = new DeleteTodoRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTodoRequest {
            return DeleteTodoRequest.deserialize(bytes);
        }
    }
    export class DeleteTodoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: DeleteTodoOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, DeleteTodoOKResponse, 1) as DeleteTodoOKResponse;
        }
        set ok(value: DeleteTodoOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof DeleteTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): DeleteTodoResponse {
            const message = new DeleteTodoResponse({});
            if (data.ok != null) {
                message.ok = DeleteTodoOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof DeleteTodoOKResponse.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = DeleteTodoOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTodoResponse {
            return DeleteTodoResponse.deserialize(bytes);
        }
    }
    export class DeleteTodoOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteTodoOKResponse {
            const message = new DeleteTodoOKResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTodoOKResponse {
            return DeleteTodoOKResponse.deserialize(bytes);
        }
    }
    export class ModifyTitleTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
        }): ModifyTitleTodoRequest {
            const message = new ModifyTitleTodoRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyTitleTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyTitleTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyTitleTodoRequest {
            return ModifyTitleTodoRequest.deserialize(bytes);
        }
    }
    export class ModifyTitleTodoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: ModifyTitleTodoOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, ModifyTitleTodoOKResponse, 1) as ModifyTitleTodoOKResponse;
        }
        set ok(value: ModifyTitleTodoOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof ModifyTitleTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): ModifyTitleTodoResponse {
            const message = new ModifyTitleTodoResponse({});
            if (data.ok != null) {
                message.ok = ModifyTitleTodoOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof ModifyTitleTodoOKResponse.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyTitleTodoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyTitleTodoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = ModifyTitleTodoOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyTitleTodoResponse {
            return ModifyTitleTodoResponse.deserialize(bytes);
        }
    }
    export class ModifyTitleTodoOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ModifyTitleTodoOKResponse {
            const message = new ModifyTitleTodoOKResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyTitleTodoOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyTitleTodoOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyTitleTodoOKResponse {
            return ModifyTitleTodoOKResponse.deserialize(bytes);
        }
    }
    export class UncompleteTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): UncompleteTodoRequest {
            const message = new UncompleteTodoRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UncompleteTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UncompleteTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UncompleteTodoRequest {
            return UncompleteTodoRequest.deserialize(bytes);
        }
    }
    export class UncompleteTodoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: UncompleteTodoOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, UncompleteTodoOKResponse, 1) as UncompleteTodoOKResponse;
        }
        set ok(value: UncompleteTodoOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof UncompleteTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): UncompleteTodoResponse {
            const message = new UncompleteTodoResponse({});
            if (data.ok != null) {
                message.ok = UncompleteTodoOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof UncompleteTodoOKResponse.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UncompleteTodoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UncompleteTodoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = UncompleteTodoOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UncompleteTodoResponse {
            return UncompleteTodoResponse.deserialize(bytes);
        }
    }
    export class UncompleteTodoOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UncompleteTodoOKResponse {
            const message = new UncompleteTodoOKResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UncompleteTodoOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UncompleteTodoOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UncompleteTodoOKResponse {
            return UncompleteTodoOKResponse.deserialize(bytes);
        }
    }
    export class GetTodosRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetTodosRequest {
            const message = new GetTodosRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTodosRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTodosRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTodosRequest {
            return GetTodosRequest.deserialize(bytes);
        }
    }
    export class GetTodosResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ok?: GetTodosOKResponse;
            error?: never;
        } | {
            ok?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get ok() {
            return pb_1.Message.getWrapperField(this, GetTodosOKResponse, 1) as GetTodosOKResponse;
        }
        set ok(value: GetTodosOKResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ok() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "ok" | "error";
            } = {
                0: "none",
                1: "ok",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ok?: ReturnType<typeof GetTodosOKResponse.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): GetTodosResponse {
            const message = new GetTodosResponse({});
            if (data.ok != null) {
                message.ok = GetTodosOKResponse.fromObject(data.ok);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: ReturnType<typeof GetTodosOKResponse.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ok)
                writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTodosResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTodosResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ok, () => message.ok = GetTodosOKResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTodosResponse {
            return GetTodosResponse.deserialize(bytes);
        }
    }
    export class GetTodosOKResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todos?: Todo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
            }
        }
        get todos() {
            return pb_1.Message.getRepeatedWrapperField(this, Todo, 1) as Todo[];
        }
        set todos(value: Todo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            todos?: ReturnType<typeof Todo.prototype.toObject>[];
        }): GetTodosOKResponse {
            const message = new GetTodosOKResponse({});
            if (data.todos != null) {
                message.todos = data.todos.map(item => Todo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                todos?: ReturnType<typeof Todo.prototype.toObject>[];
            } = {};
            if (this.todos != null) {
                data.todos = this.todos.map((item: Todo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todos.length)
                writer.writeRepeatedMessage(1, this.todos, (item: Todo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTodosOKResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTodosOKResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Todo.deserialize(reader), Todo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTodosOKResponse {
            return GetTodosOKResponse.deserialize(bytes);
        }
    }
    export class Todo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            completed?: boolean;
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("completed" in data && data.completed != undefined) {
                    this.completed = data.completed;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get completed() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set completed(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            completed?: boolean;
            userId?: string;
        }): Todo {
            const message = new Todo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.completed != null) {
                message.completed = data.completed;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                completed?: boolean;
                userId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.completed != null) {
                data.completed = this.completed;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.completed != false)
                writer.writeBool(3, this.completed);
            if (this.userId.length)
                writer.writeString(4, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Todo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Todo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.completed = reader.readBool();
                        break;
                    case 4:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Todo {
            return Todo.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTodoServiceService {
        static definition = {
            Add: {
                path: "/todo.TodoService/Add",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddTodoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddTodoResponse.deserialize(new Uint8Array(bytes))
            },
            Complete: {
                path: "/todo.TodoService/Complete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CompleteTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CompleteTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CompleteTodoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CompleteTodoResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/todo.TodoService/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteTodoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteTodoResponse.deserialize(new Uint8Array(bytes))
            },
            ModifyTitle: {
                path: "/todo.TodoService/ModifyTitle",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ModifyTitleTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ModifyTitleTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ModifyTitleTodoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ModifyTitleTodoResponse.deserialize(new Uint8Array(bytes))
            },
            Uncomplete: {
                path: "/todo.TodoService/Uncomplete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UncompleteTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UncompleteTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UncompleteTodoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UncompleteTodoResponse.deserialize(new Uint8Array(bytes))
            },
            GetTodos: {
                path: "/todo.TodoService/GetTodos",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTodosRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTodosRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTodosResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTodosResponse.deserialize(new Uint8Array(bytes))
            },
            InitializeSubscriptionConnection: {
                path: "/todo.TodoService/InitializeSubscriptionConnection",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InitializeConnectionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InitializeConnectionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InitializeConnectionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InitializeConnectionResponse.deserialize(new Uint8Array(bytes))
            },
            KeepSubscriptionAlive: {
                path: "/todo.TodoService/KeepSubscriptionAlive",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: KeepSubscriptionAliveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => KeepSubscriptionAliveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: KeepSubscriptionAliveResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => KeepSubscriptionAliveResponse.deserialize(new Uint8Array(bytes))
            },
            On: {
                path: "/todo.TodoService/On",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: OnTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OnTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OnEvent) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OnEvent.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Add(call: grpc_1.ServerUnaryCall<AddTodoRequest, AddTodoResponse>, callback: grpc_1.sendUnaryData<AddTodoResponse>): void;
        abstract Complete(call: grpc_1.ServerUnaryCall<CompleteTodoRequest, CompleteTodoResponse>, callback: grpc_1.sendUnaryData<CompleteTodoResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteTodoRequest, DeleteTodoResponse>, callback: grpc_1.sendUnaryData<DeleteTodoResponse>): void;
        abstract ModifyTitle(call: grpc_1.ServerUnaryCall<ModifyTitleTodoRequest, ModifyTitleTodoResponse>, callback: grpc_1.sendUnaryData<ModifyTitleTodoResponse>): void;
        abstract Uncomplete(call: grpc_1.ServerUnaryCall<UncompleteTodoRequest, UncompleteTodoResponse>, callback: grpc_1.sendUnaryData<UncompleteTodoResponse>): void;
        abstract GetTodos(call: grpc_1.ServerUnaryCall<GetTodosRequest, GetTodosResponse>, callback: grpc_1.sendUnaryData<GetTodosResponse>): void;
        abstract InitializeSubscriptionConnection(call: grpc_1.ServerUnaryCall<InitializeConnectionRequest, InitializeConnectionResponse>, callback: grpc_1.sendUnaryData<InitializeConnectionResponse>): void;
        abstract KeepSubscriptionAlive(call: grpc_1.ServerUnaryCall<KeepSubscriptionAliveRequest, KeepSubscriptionAliveResponse>, callback: grpc_1.sendUnaryData<KeepSubscriptionAliveResponse>): void;
        abstract On(call: grpc_1.ServerWritableStream<OnTodoRequest, OnEvent>): void;
    }
    export class TodoServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTodoServiceService.definition, "TodoService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Add: GrpcUnaryServiceInterface<AddTodoRequest, AddTodoResponse> = (message: AddTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddTodoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddTodoResponse>, callback?: grpc_1.requestCallback<AddTodoResponse>): grpc_1.ClientUnaryCall => {
            return super.Add(message, metadata, options, callback);
        };
        Complete: GrpcUnaryServiceInterface<CompleteTodoRequest, CompleteTodoResponse> = (message: CompleteTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CompleteTodoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CompleteTodoResponse>, callback?: grpc_1.requestCallback<CompleteTodoResponse>): grpc_1.ClientUnaryCall => {
            return super.Complete(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<DeleteTodoRequest, DeleteTodoResponse> = (message: DeleteTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteTodoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteTodoResponse>, callback?: grpc_1.requestCallback<DeleteTodoResponse>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        ModifyTitle: GrpcUnaryServiceInterface<ModifyTitleTodoRequest, ModifyTitleTodoResponse> = (message: ModifyTitleTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ModifyTitleTodoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ModifyTitleTodoResponse>, callback?: grpc_1.requestCallback<ModifyTitleTodoResponse>): grpc_1.ClientUnaryCall => {
            return super.ModifyTitle(message, metadata, options, callback);
        };
        Uncomplete: GrpcUnaryServiceInterface<UncompleteTodoRequest, UncompleteTodoResponse> = (message: UncompleteTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UncompleteTodoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UncompleteTodoResponse>, callback?: grpc_1.requestCallback<UncompleteTodoResponse>): grpc_1.ClientUnaryCall => {
            return super.Uncomplete(message, metadata, options, callback);
        };
        GetTodos: GrpcUnaryServiceInterface<GetTodosRequest, GetTodosResponse> = (message: GetTodosRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTodosResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTodosResponse>, callback?: grpc_1.requestCallback<GetTodosResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTodos(message, metadata, options, callback);
        };
        InitializeSubscriptionConnection: GrpcUnaryServiceInterface<InitializeConnectionRequest, InitializeConnectionResponse> = (message: InitializeConnectionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InitializeConnectionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InitializeConnectionResponse>, callback?: grpc_1.requestCallback<InitializeConnectionResponse>): grpc_1.ClientUnaryCall => {
            return super.InitializeSubscriptionConnection(message, metadata, options, callback);
        };
        KeepSubscriptionAlive: GrpcUnaryServiceInterface<KeepSubscriptionAliveRequest, KeepSubscriptionAliveResponse> = (message: KeepSubscriptionAliveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<KeepSubscriptionAliveResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<KeepSubscriptionAliveResponse>, callback?: grpc_1.requestCallback<KeepSubscriptionAliveResponse>): grpc_1.ClientUnaryCall => {
            return super.KeepSubscriptionAlive(message, metadata, options, callback);
        };
        On: GrpcStreamServiceInterface<OnTodoRequest, OnTodoRequest> = (message: OnTodoRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<OnTodoRequest> => {
            return super.On(message, metadata, options);
        };
    }
}
