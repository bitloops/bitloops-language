Command CreateTodoCommand {
  string title;
}

Command UpdateTodoCommand {
  string title;
  string id;
  bool completed;
}

Command DeleteTodoCommand {
  string id;
}

Query GetByIdTodoQuery {
  string id;
}

Query GetAllTodosQuery {
  TodoReadModel[] todos;
}

CommandHandler CreateTodoCommandHandler (todoRepo: TodoWriteRepoPort){
  execute (command: CreateTodoCommand): (OK(void),Errors(DomainErrors.TitleOutOfBoundsError))
  {
    const title = TitleVO.create({ title: command.title });
    const todo = TodoEntity.create({ title: title, completed: false });
    this.todoRepo.save(todo);
  }
}

CommandHandler UpdateTodoCommandHandler (todoRepo: TodoWriteRepoPort) {
  execute (command: UpdateTodoCommand): (OK(void), Errors(ApplicationErrors.ToDoNotFoundError)) {
    const requestId = UUIDv4(command.id);
    const todoFound = this.todoRepo.getById(requestId);
    if(NOT todoFound) {
      const requestIdString = requestId.toString(); 
      return ApplicationErrors.ToDoNotFoundError(requestIdString);
    }

    const title = TitleVO.create({ title: command.title });

    const todo = TodoEntity.create({ title: title, completed: command.completed, id: requestId });
    this.todoRepo.update(todo);
  }
}

CommandHandler DeleteTodoCommandHandler (todoRepo: TodoWriteRepoPort) {
  execute (command: DeleteTodoCommand): (OK(void), Errors(ApplicationErrors.ToDoNotFoundError)) {
    const requestId = UUIDv4(command.id);

    const todoFound = this.todoRepo.getById(requestId);
    if(NOT todoFound) {

// TS
      const requestIdString = requestId.toString(); 
      return ApplicationErrors.ToDoNotFoundError(requestIdString);
    }

    this.todoRepo.delete(requestId);
  }
}

QueryHandler GetByIdTodoQueryHandler (todoRepo: TodoReadRepoPort) {
  execute (query: GetByIdTodoQuery): (OK(TodoReadModel), Errors(ApplicationErrors.ToDoNotFoundError)) {
    const requestId = query.id;
    const todo = this.todoRepo.getById(requestId);

    if(NOT todo) {
      return ApplicationErrors.ToDoNotFoundError(requestId);
    }

    return todo;
  }
}

QueryHandler GetAllTodosQueryHandler (todoRepo: TodoReadRepoPort) {
  execute (): (OK(TodoReadModel[]), Errors()) {
    const todos = this.todoRepo.getAll();

    return todos;
  }
}

