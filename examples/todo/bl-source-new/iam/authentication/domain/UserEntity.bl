Props UserProps {
    optional UUIDv4 id;
    EmailVOVO email;
    string password;
    optional string lastLogin;
}


Root Entity UserEntity {
    static create(props: UserProps): (OK(UserProps), Errors())  {
        const todo = TodoEntity(props);
        const isNew = props.id != null;
        if (isNew) {
            todo.addDomainEvent(TodoCreatedDomainEvent);
        }
        return todo;
    }

    public complete(): (OK(void), Errors(DomainErrors.TodoAlreadyCompletedError)) {
        applyRules(TodoAlreadyCompletedRule(this.completed, this.id.toString()))
        this.completed = true;
        this.addDomainEvent(TodoCompletedDomainEvent);
    }

    public uncomplete(): (OK(void), Errors(DomainErrors.TodoAlreadyUncompletedError)) {
        applyRules(TodoAlreadyUncompletedRule(this.completed, this.id.toString()))
        this.completed = false;
        this.addDomainEvent(TodoUncompletedDomainEvent);
    }

    public modifyTitle(title: TitleVO): (OK(void), Errors()) {
        this.title = title;
        this.addDomainEvent(TodoTitleModifiedDomainEvent);
    }   
}