Config.setLanguage(TypeScript);

// DB CONNECTIONS

const mongoConnection = RepoConnections.Mongo({
  host: 'localhost',
  port: 27017,
  database: Env(MONGO_DB_DATABASE,'todo'),
});

// REPOSITORIES

const todoWriteRepo = RepoAdapters.Mongo({
  connection: mongoConnection,
  collection: Env(MONGO_DB_TODO_COLLECTION, 'todos'),
}) concretes [Todo][Todo]TodoWriteRepoPort;

const todoReadRepo = RepoAdapters.Mongo({
  connection: mongoConnection,
  collection: Env(MONGO_DB_TODO_COLLECTION, 'todos'),
}) concretes [Todo][Todo]TodoReadRepoPort;

// USE CASES

const createTodoUseCase = [Todo][Todo]CreateTodoUseCase(todoWriteRepo);
const getAllTodoUseCase = AutoUseCase(todoReadRepo, CRUDReadRepoPort.Methods.getAll);
const updateTodoUseCase = AutoUseCase(todoWriteRepo, CRUDWriteRepoPort.Methods.update);
const deleteTodoUseCase = AutoUseCase(todoWriteRepo, CRUDWriteRepoPort.Methods.delete);
const getByIdTodoUseCase = AutoUseCase(todoReadRepo, CRUDReadRepoPort.Methods.getById);

// REST ROUTERS

const todoRESTRouter = RESTRouter(REST.Fastify) {
  Post('/'): [Todo][Todo]CreateTodoRESTController(createTodoUseCase);
  Get('/'): [Todo][Todo]AutoRESTController(getAllTodoUseCase);
  // Patch('/:id'): [Todo][Todo]AutoRESTController(updateTodoUseCase);
  // Delete('/:id'): [Todo][Todo]AutoRESTController(deleteTodoUseCase);
  // Get('/:id'): [Todo][Todo]AutoRESTController(getByIdTodoUseCase);
}

// SERVERS

RESTServer({
  server: REST.Fastify,
  port: Env(FASTIFY_PORT, 5001),
  apiPrefix: '/api',
  corsOptions: { origin: '*' },
}) {
  '/todo': todoRESTRouter;
}

GraphQLServer({
  port: Env(APOLLO_SERVER, 5002),
}) {
  [Todo][Todo]AutoGrapQLController(getAllTodoUseCase);
}

// The below methods are automatically generated by the language
// when using the CRUD Ports
// getAll(): TodoEntity[] - Read model
// getById(todoId: Id): TodoEntity - Write model
// getById(todoId: string): TodoReadModel - Read model
// save(todo: TodoEntity): void - Write model
// update(todo: TodoEntity): void - Write model
// delete(todoId: Id): void - Write model
