// source: todo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.todo.AddTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.AddTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.AddTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.AddTodoRequest', null, global);
goog.exportSymbol('proto.todo.AddTodoResponse', null, global);
goog.exportSymbol('proto.todo.AddTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.CompleteTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.CompleteTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.CompleteTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.CompleteTodoRequest', null, global);
goog.exportSymbol('proto.todo.CompleteTodoResponse', null, global);
goog.exportSymbol('proto.todo.CompleteTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.DeleteTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.DeleteTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.DeleteTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.DeleteTodoRequest', null, global);
goog.exportSymbol('proto.todo.DeleteTodoResponse', null, global);
goog.exportSymbol('proto.todo.DeleteTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.ErrorResponse', null, global);
goog.exportSymbol('proto.todo.GetAllTodosErrorResponse', null, global);
goog.exportSymbol('proto.todo.GetAllTodosErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.GetAllTodosOKResponse', null, global);
goog.exportSymbol('proto.todo.GetAllTodosRequest', null, global);
goog.exportSymbol('proto.todo.GetAllTodosResponse', null, global);
goog.exportSymbol('proto.todo.GetAllTodosResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.InitializeConnectionRequest', null, global);
goog.exportSymbol('proto.todo.InitializeConnectionResponse', null, global);
goog.exportSymbol('proto.todo.KeepSubscriptionAliveRequest', null, global);
goog.exportSymbol('proto.todo.KeepSubscriptionAliveResponse', null, global);
goog.exportSymbol('proto.todo.ModifyTitleTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.ModifyTitleTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.ModifyTitleTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.ModifyTitleTodoRequest', null, global);
goog.exportSymbol('proto.todo.ModifyTitleTodoResponse', null, global);
goog.exportSymbol('proto.todo.ModifyTitleTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.OnEvent', null, global);
goog.exportSymbol('proto.todo.OnEvent.EventCase', null, global);
goog.exportSymbol('proto.todo.OnTodoRequest', null, global);
goog.exportSymbol('proto.todo.TODO_EVENTS', null, global);
goog.exportSymbol('proto.todo.Todo', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoRequest', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoResponse', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoResponse.ResultCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.InitializeConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.InitializeConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.InitializeConnectionRequest.displayName = 'proto.todo.InitializeConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.InitializeConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.InitializeConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.InitializeConnectionResponse.displayName = 'proto.todo.InitializeConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.KeepSubscriptionAliveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.KeepSubscriptionAliveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.KeepSubscriptionAliveRequest.displayName = 'proto.todo.KeepSubscriptionAliveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.KeepSubscriptionAliveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.KeepSubscriptionAliveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.KeepSubscriptionAliveResponse.displayName = 'proto.todo.KeepSubscriptionAliveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.OnTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.todo.OnTodoRequest.repeatedFields_, null);
};
goog.inherits(proto.todo.OnTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.OnTodoRequest.displayName = 'proto.todo.OnTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.OnEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.OnEvent.oneofGroups_);
};
goog.inherits(proto.todo.OnEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.OnEvent.displayName = 'proto.todo.OnEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ErrorResponse.displayName = 'proto.todo.ErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.AddTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoRequest.displayName = 'proto.todo.AddTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.AddTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.AddTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoResponse.displayName = 'proto.todo.AddTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.AddTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.AddTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoErrorResponse.displayName = 'proto.todo.AddTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.AddTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoOKResponse.displayName = 'proto.todo.AddTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.CompleteTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoRequest.displayName = 'proto.todo.CompleteTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.CompleteTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.CompleteTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoResponse.displayName = 'proto.todo.CompleteTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.CompleteTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.CompleteTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoErrorResponse.displayName = 'proto.todo.CompleteTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.DeleteTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.DeleteTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.DeleteTodoOKResponse.displayName = 'proto.todo.DeleteTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.DeleteTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.DeleteTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.DeleteTodoRequest.displayName = 'proto.todo.DeleteTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.DeleteTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.DeleteTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.DeleteTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.DeleteTodoResponse.displayName = 'proto.todo.DeleteTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.DeleteTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.DeleteTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.DeleteTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.DeleteTodoErrorResponse.displayName = 'proto.todo.DeleteTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.CompleteTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoOKResponse.displayName = 'proto.todo.CompleteTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllTodosRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.GetAllTodosRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllTodosRequest.displayName = 'proto.todo.GetAllTodosRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllTodosResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.GetAllTodosResponse.oneofGroups_);
};
goog.inherits(proto.todo.GetAllTodosResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllTodosResponse.displayName = 'proto.todo.GetAllTodosResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllTodosErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.GetAllTodosErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.GetAllTodosErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllTodosErrorResponse.displayName = 'proto.todo.GetAllTodosErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllTodosOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.todo.GetAllTodosOKResponse.repeatedFields_, null);
};
goog.inherits(proto.todo.GetAllTodosOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllTodosOKResponse.displayName = 'proto.todo.GetAllTodosOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTitleTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.ModifyTitleTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTitleTodoRequest.displayName = 'proto.todo.ModifyTitleTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTitleTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.ModifyTitleTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.ModifyTitleTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTitleTodoResponse.displayName = 'proto.todo.ModifyTitleTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTitleTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.ModifyTitleTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.ModifyTitleTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTitleTodoErrorResponse.displayName = 'proto.todo.ModifyTitleTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTitleTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.ModifyTitleTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTitleTodoOKResponse.displayName = 'proto.todo.ModifyTitleTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.UncompleteTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoRequest.displayName = 'proto.todo.UncompleteTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.UncompleteTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.UncompleteTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoResponse.displayName = 'proto.todo.UncompleteTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.UncompleteTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.UncompleteTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoErrorResponse.displayName = 'proto.todo.UncompleteTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.UncompleteTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoOKResponse.displayName = 'proto.todo.UncompleteTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.Todo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.Todo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.Todo.displayName = 'proto.todo.Todo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.InitializeConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.InitializeConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.InitializeConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.InitializeConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.InitializeConnectionRequest}
 */
proto.todo.InitializeConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.InitializeConnectionRequest;
  return proto.todo.InitializeConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.InitializeConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.InitializeConnectionRequest}
 */
proto.todo.InitializeConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.InitializeConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.InitializeConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.InitializeConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.InitializeConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.InitializeConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.InitializeConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.InitializeConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.InitializeConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriberid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.InitializeConnectionResponse}
 */
proto.todo.InitializeConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.InitializeConnectionResponse;
  return proto.todo.InitializeConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.InitializeConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.InitializeConnectionResponse}
 */
proto.todo.InitializeConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.InitializeConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.InitializeConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.InitializeConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.InitializeConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriberid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string subscriberId = 1;
 * @return {string}
 */
proto.todo.InitializeConnectionResponse.prototype.getSubscriberid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.InitializeConnectionResponse} returns this
 */
proto.todo.InitializeConnectionResponse.prototype.setSubscriberid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.KeepSubscriptionAliveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.KeepSubscriptionAliveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.KeepSubscriptionAliveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.KeepSubscriptionAliveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriberid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.KeepSubscriptionAliveRequest}
 */
proto.todo.KeepSubscriptionAliveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.KeepSubscriptionAliveRequest;
  return proto.todo.KeepSubscriptionAliveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.KeepSubscriptionAliveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.KeepSubscriptionAliveRequest}
 */
proto.todo.KeepSubscriptionAliveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.KeepSubscriptionAliveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.KeepSubscriptionAliveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.KeepSubscriptionAliveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.KeepSubscriptionAliveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriberid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string subscriberId = 1;
 * @return {string}
 */
proto.todo.KeepSubscriptionAliveRequest.prototype.getSubscriberid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.KeepSubscriptionAliveRequest} returns this
 */
proto.todo.KeepSubscriptionAliveRequest.prototype.setSubscriberid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.KeepSubscriptionAliveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.KeepSubscriptionAliveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.KeepSubscriptionAliveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.KeepSubscriptionAliveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    renewedauthtoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.KeepSubscriptionAliveResponse}
 */
proto.todo.KeepSubscriptionAliveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.KeepSubscriptionAliveResponse;
  return proto.todo.KeepSubscriptionAliveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.KeepSubscriptionAliveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.KeepSubscriptionAliveResponse}
 */
proto.todo.KeepSubscriptionAliveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenewedauthtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.KeepSubscriptionAliveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.KeepSubscriptionAliveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.KeepSubscriptionAliveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.KeepSubscriptionAliveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string renewedAuthToken = 1;
 * @return {string}
 */
proto.todo.KeepSubscriptionAliveResponse.prototype.getRenewedauthtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.KeepSubscriptionAliveResponse} returns this
 */
proto.todo.KeepSubscriptionAliveResponse.prototype.setRenewedauthtoken = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.todo.KeepSubscriptionAliveResponse} returns this
 */
proto.todo.KeepSubscriptionAliveResponse.prototype.clearRenewedauthtoken = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.KeepSubscriptionAliveResponse.prototype.hasRenewedauthtoken = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.todo.OnTodoRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.OnTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.OnTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.OnTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.OnTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriberid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.OnTodoRequest}
 */
proto.todo.OnTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.OnTodoRequest;
  return proto.todo.OnTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.OnTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.OnTodoRequest}
 */
proto.todo.OnTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberid(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.todo.TODO_EVENTS>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEvents(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.OnTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.OnTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.OnTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.OnTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriberid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional string subscriberId = 1;
 * @return {string}
 */
proto.todo.OnTodoRequest.prototype.getSubscriberid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.OnTodoRequest} returns this
 */
proto.todo.OnTodoRequest.prototype.setSubscriberid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TODO_EVENTS events = 2;
 * @return {!Array<!proto.todo.TODO_EVENTS>}
 */
proto.todo.OnTodoRequest.prototype.getEventsList = function() {
  return /** @type {!Array<!proto.todo.TODO_EVENTS>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.todo.TODO_EVENTS>} value
 * @return {!proto.todo.OnTodoRequest} returns this
 */
proto.todo.OnTodoRequest.prototype.setEventsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.todo.TODO_EVENTS} value
 * @param {number=} opt_index
 * @return {!proto.todo.OnTodoRequest} returns this
 */
proto.todo.OnTodoRequest.prototype.addEvents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.todo.OnTodoRequest} returns this
 */
proto.todo.OnTodoRequest.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.OnEvent.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.todo.OnEvent.EventCase = {
  EVENT_NOT_SET: 0,
  ONADDED: 1,
  ONCOMPLETED: 2,
  ONUNCOMPLETED: 3,
  ONMODIFIEDTITLE: 4,
  ONDELETED: 5
};

/**
 * @return {proto.todo.OnEvent.EventCase}
 */
proto.todo.OnEvent.prototype.getEventCase = function() {
  return /** @type {proto.todo.OnEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.todo.OnEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.OnEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.OnEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.OnEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.OnEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    onadded: (f = msg.getOnadded()) && proto.todo.Todo.toObject(includeInstance, f),
    oncompleted: (f = msg.getOncompleted()) && proto.todo.Todo.toObject(includeInstance, f),
    onuncompleted: (f = msg.getOnuncompleted()) && proto.todo.Todo.toObject(includeInstance, f),
    onmodifiedtitle: (f = msg.getOnmodifiedtitle()) && proto.todo.Todo.toObject(includeInstance, f),
    ondeleted: (f = msg.getOndeleted()) && proto.todo.Todo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.OnEvent}
 */
proto.todo.OnEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.OnEvent;
  return proto.todo.OnEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.OnEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.OnEvent}
 */
proto.todo.OnEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.Todo;
      reader.readMessage(value,proto.todo.Todo.deserializeBinaryFromReader);
      msg.setOnadded(value);
      break;
    case 2:
      var value = new proto.todo.Todo;
      reader.readMessage(value,proto.todo.Todo.deserializeBinaryFromReader);
      msg.setOncompleted(value);
      break;
    case 3:
      var value = new proto.todo.Todo;
      reader.readMessage(value,proto.todo.Todo.deserializeBinaryFromReader);
      msg.setOnuncompleted(value);
      break;
    case 4:
      var value = new proto.todo.Todo;
      reader.readMessage(value,proto.todo.Todo.deserializeBinaryFromReader);
      msg.setOnmodifiedtitle(value);
      break;
    case 5:
      var value = new proto.todo.Todo;
      reader.readMessage(value,proto.todo.Todo.deserializeBinaryFromReader);
      msg.setOndeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.OnEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.OnEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.OnEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.OnEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnadded();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.Todo.serializeBinaryToWriter
    );
  }
  f = message.getOncompleted();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.Todo.serializeBinaryToWriter
    );
  }
  f = message.getOnuncompleted();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.Todo.serializeBinaryToWriter
    );
  }
  f = message.getOnmodifiedtitle();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.todo.Todo.serializeBinaryToWriter
    );
  }
  f = message.getOndeleted();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Todo onAdded = 1;
 * @return {?proto.todo.Todo}
 */
proto.todo.OnEvent.prototype.getOnadded = function() {
  return /** @type{?proto.todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.todo.Todo, 1));
};


/**
 * @param {?proto.todo.Todo|undefined} value
 * @return {!proto.todo.OnEvent} returns this
*/
proto.todo.OnEvent.prototype.setOnadded = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.OnEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.OnEvent} returns this
 */
proto.todo.OnEvent.prototype.clearOnadded = function() {
  return this.setOnadded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.OnEvent.prototype.hasOnadded = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Todo onCompleted = 2;
 * @return {?proto.todo.Todo}
 */
proto.todo.OnEvent.prototype.getOncompleted = function() {
  return /** @type{?proto.todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.todo.Todo, 2));
};


/**
 * @param {?proto.todo.Todo|undefined} value
 * @return {!proto.todo.OnEvent} returns this
*/
proto.todo.OnEvent.prototype.setOncompleted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.OnEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.OnEvent} returns this
 */
proto.todo.OnEvent.prototype.clearOncompleted = function() {
  return this.setOncompleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.OnEvent.prototype.hasOncompleted = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Todo onUncompleted = 3;
 * @return {?proto.todo.Todo}
 */
proto.todo.OnEvent.prototype.getOnuncompleted = function() {
  return /** @type{?proto.todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.todo.Todo, 3));
};


/**
 * @param {?proto.todo.Todo|undefined} value
 * @return {!proto.todo.OnEvent} returns this
*/
proto.todo.OnEvent.prototype.setOnuncompleted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.OnEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.OnEvent} returns this
 */
proto.todo.OnEvent.prototype.clearOnuncompleted = function() {
  return this.setOnuncompleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.OnEvent.prototype.hasOnuncompleted = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Todo onModifiedTitle = 4;
 * @return {?proto.todo.Todo}
 */
proto.todo.OnEvent.prototype.getOnmodifiedtitle = function() {
  return /** @type{?proto.todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.todo.Todo, 4));
};


/**
 * @param {?proto.todo.Todo|undefined} value
 * @return {!proto.todo.OnEvent} returns this
*/
proto.todo.OnEvent.prototype.setOnmodifiedtitle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.todo.OnEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.OnEvent} returns this
 */
proto.todo.OnEvent.prototype.clearOnmodifiedtitle = function() {
  return this.setOnmodifiedtitle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.OnEvent.prototype.hasOnmodifiedtitle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Todo onDeleted = 5;
 * @return {?proto.todo.Todo}
 */
proto.todo.OnEvent.prototype.getOndeleted = function() {
  return /** @type{?proto.todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.todo.Todo, 5));
};


/**
 * @param {?proto.todo.Todo|undefined} value
 * @return {!proto.todo.OnEvent} returns this
*/
proto.todo.OnEvent.prototype.setOndeleted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.todo.OnEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.OnEvent} returns this
 */
proto.todo.OnEvent.prototype.clearOndeleted = function() {
  return this.setOndeleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.OnEvent.prototype.hasOndeleted = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ErrorResponse}
 */
proto.todo.ErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ErrorResponse;
  return proto.todo.ErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ErrorResponse}
 */
proto.todo.ErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.todo.ErrorResponse.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ErrorResponse} returns this
 */
proto.todo.ErrorResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.todo.ErrorResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ErrorResponse} returns this
 */
proto.todo.ErrorResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoRequest}
 */
proto.todo.AddTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoRequest;
  return proto.todo.AddTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoRequest}
 */
proto.todo.AddTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.todo.AddTodoRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.AddTodoRequest} returns this
 */
proto.todo.AddTodoRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.AddTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.AddTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.AddTodoResponse.ResultCase}
 */
proto.todo.AddTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.AddTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.AddTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.AddTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.AddTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoResponse}
 */
proto.todo.AddTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoResponse;
  return proto.todo.AddTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoResponse}
 */
proto.todo.AddTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.AddTodoOKResponse;
      reader.readMessage(value,proto.todo.AddTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.AddTodoErrorResponse;
      reader.readMessage(value,proto.todo.AddTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.AddTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.AddTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional AddTodoOKResponse ok = 1;
 * @return {?proto.todo.AddTodoOKResponse}
 */
proto.todo.AddTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.AddTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.AddTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.AddTodoOKResponse|undefined} value
 * @return {!proto.todo.AddTodoResponse} returns this
*/
proto.todo.AddTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.AddTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoResponse} returns this
 */
proto.todo.AddTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AddTodoErrorResponse error = 2;
 * @return {?proto.todo.AddTodoErrorResponse}
 */
proto.todo.AddTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.AddTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.AddTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.AddTodoErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoResponse} returns this
*/
proto.todo.AddTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.AddTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoResponse} returns this
 */
proto.todo.AddTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.AddTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.todo.AddTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  INVALIDTITLELENGTHERROR: 3
};

/**
 * @return {proto.todo.AddTodoErrorResponse.ErrorCase}
 */
proto.todo.AddTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.AddTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.AddTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    invalidtitlelengtherror: (f = msg.getInvalidtitlelengtherror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoErrorResponse}
 */
proto.todo.AddTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoErrorResponse;
  return proto.todo.AddTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoErrorResponse}
 */
proto.todo.AddTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setInvalidtitlelengtherror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getInvalidtitlelengtherror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.AddTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoErrorResponse} returns this
*/
proto.todo.AddTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoErrorResponse} returns this
 */
proto.todo.AddTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.AddTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoErrorResponse} returns this
*/
proto.todo.AddTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoErrorResponse} returns this
 */
proto.todo.AddTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse invalidTitleLengthError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.AddTodoErrorResponse.prototype.getInvalidtitlelengtherror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoErrorResponse} returns this
*/
proto.todo.AddTodoErrorResponse.prototype.setInvalidtitlelengtherror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoErrorResponse} returns this
 */
proto.todo.AddTodoErrorResponse.prototype.clearInvalidtitlelengtherror = function() {
  return this.setInvalidtitlelengtherror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoErrorResponse.prototype.hasInvalidtitlelengtherror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoOKResponse}
 */
proto.todo.AddTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoOKResponse;
  return proto.todo.AddTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoOKResponse}
 */
proto.todo.AddTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.AddTodoOKResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.AddTodoOKResponse} returns this
 */
proto.todo.AddTodoOKResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoRequest}
 */
proto.todo.CompleteTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoRequest;
  return proto.todo.CompleteTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoRequest}
 */
proto.todo.CompleteTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.CompleteTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.CompleteTodoRequest} returns this
 */
proto.todo.CompleteTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.CompleteTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.CompleteTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.CompleteTodoResponse.ResultCase}
 */
proto.todo.CompleteTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.CompleteTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.CompleteTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.CompleteTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.CompleteTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoResponse}
 */
proto.todo.CompleteTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoResponse;
  return proto.todo.CompleteTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoResponse}
 */
proto.todo.CompleteTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.CompleteTodoOKResponse;
      reader.readMessage(value,proto.todo.CompleteTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.CompleteTodoErrorResponse;
      reader.readMessage(value,proto.todo.CompleteTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.CompleteTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.CompleteTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompleteTodoOKResponse ok = 1;
 * @return {?proto.todo.CompleteTodoOKResponse}
 */
proto.todo.CompleteTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.CompleteTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.CompleteTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.CompleteTodoOKResponse|undefined} value
 * @return {!proto.todo.CompleteTodoResponse} returns this
*/
proto.todo.CompleteTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.CompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoResponse} returns this
 */
proto.todo.CompleteTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompleteTodoErrorResponse error = 2;
 * @return {?proto.todo.CompleteTodoErrorResponse}
 */
proto.todo.CompleteTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.CompleteTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.CompleteTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.CompleteTodoErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoResponse} returns this
*/
proto.todo.CompleteTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.CompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoResponse} returns this
 */
proto.todo.CompleteTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.CompleteTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.todo.CompleteTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  TODOALREADYEXISTSERROR: 3
};

/**
 * @return {proto.todo.CompleteTodoErrorResponse.ErrorCase}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.CompleteTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    todoalreadyexistserror: (f = msg.getTodoalreadyexistserror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoErrorResponse;
  return proto.todo.CompleteTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTodoalreadyexistserror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTodoalreadyexistserror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
*/
proto.todo.CompleteTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
 */
proto.todo.CompleteTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
*/
proto.todo.CompleteTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
 */
proto.todo.CompleteTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse todoAlreadyExistsError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getTodoalreadyexistserror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
*/
proto.todo.CompleteTodoErrorResponse.prototype.setTodoalreadyexistserror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
 */
proto.todo.CompleteTodoErrorResponse.prototype.clearTodoalreadyexistserror = function() {
  return this.setTodoalreadyexistserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoErrorResponse.prototype.hasTodoalreadyexistserror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.DeleteTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.DeleteTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.DeleteTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.DeleteTodoOKResponse}
 */
proto.todo.DeleteTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.DeleteTodoOKResponse;
  return proto.todo.DeleteTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.DeleteTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.DeleteTodoOKResponse}
 */
proto.todo.DeleteTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.DeleteTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.DeleteTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.DeleteTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.DeleteTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.DeleteTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.DeleteTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.DeleteTodoRequest}
 */
proto.todo.DeleteTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.DeleteTodoRequest;
  return proto.todo.DeleteTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.DeleteTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.DeleteTodoRequest}
 */
proto.todo.DeleteTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.DeleteTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.DeleteTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.DeleteTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.DeleteTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.DeleteTodoRequest} returns this
 */
proto.todo.DeleteTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.DeleteTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.DeleteTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.DeleteTodoResponse.ResultCase}
 */
proto.todo.DeleteTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.DeleteTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.DeleteTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.DeleteTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.DeleteTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.DeleteTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.DeleteTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.DeleteTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.DeleteTodoResponse}
 */
proto.todo.DeleteTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.DeleteTodoResponse;
  return proto.todo.DeleteTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.DeleteTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.DeleteTodoResponse}
 */
proto.todo.DeleteTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.DeleteTodoOKResponse;
      reader.readMessage(value,proto.todo.DeleteTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.DeleteTodoErrorResponse;
      reader.readMessage(value,proto.todo.DeleteTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.DeleteTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.DeleteTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.DeleteTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.DeleteTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.DeleteTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeleteTodoOKResponse ok = 1;
 * @return {?proto.todo.DeleteTodoOKResponse}
 */
proto.todo.DeleteTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.DeleteTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.DeleteTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.DeleteTodoOKResponse|undefined} value
 * @return {!proto.todo.DeleteTodoResponse} returns this
*/
proto.todo.DeleteTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.DeleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.DeleteTodoResponse} returns this
 */
proto.todo.DeleteTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.DeleteTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteTodoErrorResponse error = 2;
 * @return {?proto.todo.DeleteTodoErrorResponse}
 */
proto.todo.DeleteTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.DeleteTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.DeleteTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.DeleteTodoErrorResponse|undefined} value
 * @return {!proto.todo.DeleteTodoResponse} returns this
*/
proto.todo.DeleteTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.DeleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.DeleteTodoResponse} returns this
 */
proto.todo.DeleteTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.DeleteTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.DeleteTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.todo.DeleteTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  TODOALREADYEXISTSERROR: 3
};

/**
 * @return {proto.todo.DeleteTodoErrorResponse.ErrorCase}
 */
proto.todo.DeleteTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.DeleteTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.DeleteTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.DeleteTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.DeleteTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.DeleteTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    todoalreadyexistserror: (f = msg.getTodoalreadyexistserror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.DeleteTodoErrorResponse}
 */
proto.todo.DeleteTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.DeleteTodoErrorResponse;
  return proto.todo.DeleteTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.DeleteTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.DeleteTodoErrorResponse}
 */
proto.todo.DeleteTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTodoalreadyexistserror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.DeleteTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.DeleteTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.DeleteTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.DeleteTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTodoalreadyexistserror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.DeleteTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.DeleteTodoErrorResponse} returns this
*/
proto.todo.DeleteTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.DeleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.DeleteTodoErrorResponse} returns this
 */
proto.todo.DeleteTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.DeleteTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.DeleteTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.DeleteTodoErrorResponse} returns this
*/
proto.todo.DeleteTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.DeleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.DeleteTodoErrorResponse} returns this
 */
proto.todo.DeleteTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.DeleteTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse todoAlreadyExistsError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.DeleteTodoErrorResponse.prototype.getTodoalreadyexistserror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.DeleteTodoErrorResponse} returns this
*/
proto.todo.DeleteTodoErrorResponse.prototype.setTodoalreadyexistserror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.DeleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.DeleteTodoErrorResponse} returns this
 */
proto.todo.DeleteTodoErrorResponse.prototype.clearTodoalreadyexistserror = function() {
  return this.setTodoalreadyexistserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.DeleteTodoErrorResponse.prototype.hasTodoalreadyexistserror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoOKResponse}
 */
proto.todo.CompleteTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoOKResponse;
  return proto.todo.CompleteTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoOKResponse}
 */
proto.todo.CompleteTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllTodosRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllTodosRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllTodosRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllTodosRequest}
 */
proto.todo.GetAllTodosRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllTodosRequest;
  return proto.todo.GetAllTodosRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllTodosRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllTodosRequest}
 */
proto.todo.GetAllTodosRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllTodosRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllTodosRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllTodosRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.GetAllTodosResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.GetAllTodosResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.GetAllTodosResponse.ResultCase}
 */
proto.todo.GetAllTodosResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.GetAllTodosResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.GetAllTodosResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllTodosResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllTodosResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllTodosResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.GetAllTodosOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.GetAllTodosErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllTodosResponse}
 */
proto.todo.GetAllTodosResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllTodosResponse;
  return proto.todo.GetAllTodosResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllTodosResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllTodosResponse}
 */
proto.todo.GetAllTodosResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.GetAllTodosOKResponse;
      reader.readMessage(value,proto.todo.GetAllTodosOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.GetAllTodosErrorResponse;
      reader.readMessage(value,proto.todo.GetAllTodosErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllTodosResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllTodosResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllTodosResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.GetAllTodosOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.GetAllTodosErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetAllTodosOKResponse ok = 1;
 * @return {?proto.todo.GetAllTodosOKResponse}
 */
proto.todo.GetAllTodosResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.GetAllTodosOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.GetAllTodosOKResponse, 1));
};


/**
 * @param {?proto.todo.GetAllTodosOKResponse|undefined} value
 * @return {!proto.todo.GetAllTodosResponse} returns this
*/
proto.todo.GetAllTodosResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.GetAllTodosResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllTodosResponse} returns this
 */
proto.todo.GetAllTodosResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllTodosResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetAllTodosErrorResponse error = 2;
 * @return {?proto.todo.GetAllTodosErrorResponse}
 */
proto.todo.GetAllTodosResponse.prototype.getError = function() {
  return /** @type{?proto.todo.GetAllTodosErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.GetAllTodosErrorResponse, 2));
};


/**
 * @param {?proto.todo.GetAllTodosErrorResponse|undefined} value
 * @return {!proto.todo.GetAllTodosResponse} returns this
*/
proto.todo.GetAllTodosResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.GetAllTodosResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllTodosResponse} returns this
 */
proto.todo.GetAllTodosResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllTodosResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.GetAllTodosErrorResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.GetAllTodosErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2
};

/**
 * @return {proto.todo.GetAllTodosErrorResponse.ErrorCase}
 */
proto.todo.GetAllTodosErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.GetAllTodosErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.GetAllTodosErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllTodosErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllTodosErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllTodosErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllTodosErrorResponse}
 */
proto.todo.GetAllTodosErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllTodosErrorResponse;
  return proto.todo.GetAllTodosErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllTodosErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllTodosErrorResponse}
 */
proto.todo.GetAllTodosErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllTodosErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllTodosErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllTodosErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.GetAllTodosErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.GetAllTodosErrorResponse} returns this
*/
proto.todo.GetAllTodosErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.GetAllTodosErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllTodosErrorResponse} returns this
 */
proto.todo.GetAllTodosErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllTodosErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.GetAllTodosErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.GetAllTodosErrorResponse} returns this
*/
proto.todo.GetAllTodosErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.GetAllTodosErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllTodosErrorResponse} returns this
 */
proto.todo.GetAllTodosErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllTodosErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.todo.GetAllTodosOKResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllTodosOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllTodosOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllTodosOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todosList: jspb.Message.toObjectList(msg.getTodosList(),
    proto.todo.Todo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllTodosOKResponse}
 */
proto.todo.GetAllTodosOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllTodosOKResponse;
  return proto.todo.GetAllTodosOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllTodosOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllTodosOKResponse}
 */
proto.todo.GetAllTodosOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.Todo;
      reader.readMessage(value,proto.todo.Todo.deserializeBinaryFromReader);
      msg.addTodos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllTodosOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllTodosOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllTodosOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllTodosOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Todo todos = 1;
 * @return {!Array<!proto.todo.Todo>}
 */
proto.todo.GetAllTodosOKResponse.prototype.getTodosList = function() {
  return /** @type{!Array<!proto.todo.Todo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.todo.Todo, 1));
};


/**
 * @param {!Array<!proto.todo.Todo>} value
 * @return {!proto.todo.GetAllTodosOKResponse} returns this
*/
proto.todo.GetAllTodosOKResponse.prototype.setTodosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.todo.Todo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.todo.Todo}
 */
proto.todo.GetAllTodosOKResponse.prototype.addTodos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.todo.Todo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.todo.GetAllTodosOKResponse} returns this
 */
proto.todo.GetAllTodosOKResponse.prototype.clearTodosList = function() {
  return this.setTodosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTitleTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTitleTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTitleTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTitleTodoRequest}
 */
proto.todo.ModifyTitleTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTitleTodoRequest;
  return proto.todo.ModifyTitleTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTitleTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTitleTodoRequest}
 */
proto.todo.ModifyTitleTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTitleTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTitleTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTitleTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.ModifyTitleTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ModifyTitleTodoRequest} returns this
 */
proto.todo.ModifyTitleTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.todo.ModifyTitleTodoRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ModifyTitleTodoRequest} returns this
 */
proto.todo.ModifyTitleTodoRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.ModifyTitleTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.ModifyTitleTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.ModifyTitleTodoResponse.ResultCase}
 */
proto.todo.ModifyTitleTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.ModifyTitleTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.ModifyTitleTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTitleTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTitleTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTitleTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.ModifyTitleTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.ModifyTitleTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTitleTodoResponse}
 */
proto.todo.ModifyTitleTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTitleTodoResponse;
  return proto.todo.ModifyTitleTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTitleTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTitleTodoResponse}
 */
proto.todo.ModifyTitleTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ModifyTitleTodoOKResponse;
      reader.readMessage(value,proto.todo.ModifyTitleTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.ModifyTitleTodoErrorResponse;
      reader.readMessage(value,proto.todo.ModifyTitleTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTitleTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTitleTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTitleTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ModifyTitleTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ModifyTitleTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ModifyTitleTodoOKResponse ok = 1;
 * @return {?proto.todo.ModifyTitleTodoOKResponse}
 */
proto.todo.ModifyTitleTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.ModifyTitleTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ModifyTitleTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.ModifyTitleTodoOKResponse|undefined} value
 * @return {!proto.todo.ModifyTitleTodoResponse} returns this
*/
proto.todo.ModifyTitleTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.ModifyTitleTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTitleTodoResponse} returns this
 */
proto.todo.ModifyTitleTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTitleTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ModifyTitleTodoErrorResponse error = 2;
 * @return {?proto.todo.ModifyTitleTodoErrorResponse}
 */
proto.todo.ModifyTitleTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.ModifyTitleTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ModifyTitleTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.ModifyTitleTodoErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTitleTodoResponse} returns this
*/
proto.todo.ModifyTitleTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.ModifyTitleTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTitleTodoResponse} returns this
 */
proto.todo.ModifyTitleTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTitleTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.ModifyTitleTodoErrorResponse.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.todo.ModifyTitleTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  TODODOESNOTEXISTERROR: 3,
  INVALIDTITLELENGTHERROR: 4
};

/**
 * @return {proto.todo.ModifyTitleTodoErrorResponse.ErrorCase}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.ModifyTitleTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.ModifyTitleTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTitleTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTitleTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    tododoesnotexisterror: (f = msg.getTododoesnotexisterror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    invalidtitlelengtherror: (f = msg.getInvalidtitlelengtherror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTitleTodoErrorResponse}
 */
proto.todo.ModifyTitleTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTitleTodoErrorResponse;
  return proto.todo.ModifyTitleTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTitleTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTitleTodoErrorResponse}
 */
proto.todo.ModifyTitleTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTododoesnotexisterror(value);
      break;
    case 4:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setInvalidtitlelengtherror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTitleTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTitleTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTododoesnotexisterror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getInvalidtitlelengtherror();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
*/
proto.todo.ModifyTitleTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.ModifyTitleTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
*/
proto.todo.ModifyTitleTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.ModifyTitleTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse todoDoesNotExistError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.getTododoesnotexisterror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
*/
proto.todo.ModifyTitleTodoErrorResponse.prototype.setTododoesnotexisterror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.ModifyTitleTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.clearTododoesnotexisterror = function() {
  return this.setTododoesnotexisterror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.hasTododoesnotexisterror = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ErrorResponse invalidTitleLengthError = 4;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.getInvalidtitlelengtherror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 4));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
*/
proto.todo.ModifyTitleTodoErrorResponse.prototype.setInvalidtitlelengtherror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.todo.ModifyTitleTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTitleTodoErrorResponse} returns this
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.clearInvalidtitlelengtherror = function() {
  return this.setInvalidtitlelengtherror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTitleTodoErrorResponse.prototype.hasInvalidtitlelengtherror = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTitleTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTitleTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTitleTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTitleTodoOKResponse}
 */
proto.todo.ModifyTitleTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTitleTodoOKResponse;
  return proto.todo.ModifyTitleTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTitleTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTitleTodoOKResponse}
 */
proto.todo.ModifyTitleTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTitleTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTitleTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTitleTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTitleTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoRequest}
 */
proto.todo.UncompleteTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoRequest;
  return proto.todo.UncompleteTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoRequest}
 */
proto.todo.UncompleteTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.UncompleteTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.UncompleteTodoRequest} returns this
 */
proto.todo.UncompleteTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.UncompleteTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.UncompleteTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.UncompleteTodoResponse.ResultCase}
 */
proto.todo.UncompleteTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.UncompleteTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.UncompleteTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.UncompleteTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.UncompleteTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoResponse}
 */
proto.todo.UncompleteTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoResponse;
  return proto.todo.UncompleteTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoResponse}
 */
proto.todo.UncompleteTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.UncompleteTodoOKResponse;
      reader.readMessage(value,proto.todo.UncompleteTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.UncompleteTodoErrorResponse;
      reader.readMessage(value,proto.todo.UncompleteTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.UncompleteTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.UncompleteTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional UncompleteTodoOKResponse ok = 1;
 * @return {?proto.todo.UncompleteTodoOKResponse}
 */
proto.todo.UncompleteTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.UncompleteTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.UncompleteTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.UncompleteTodoOKResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoResponse} returns this
*/
proto.todo.UncompleteTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.UncompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoResponse} returns this
 */
proto.todo.UncompleteTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UncompleteTodoErrorResponse error = 2;
 * @return {?proto.todo.UncompleteTodoErrorResponse}
 */
proto.todo.UncompleteTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.UncompleteTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.UncompleteTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.UncompleteTodoErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoResponse} returns this
*/
proto.todo.UncompleteTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.UncompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoResponse} returns this
 */
proto.todo.UncompleteTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.UncompleteTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.todo.UncompleteTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  TODOALREADYEXISTSERROR: 3
};

/**
 * @return {proto.todo.UncompleteTodoErrorResponse.ErrorCase}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.UncompleteTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    todoalreadyexistserror: (f = msg.getTodoalreadyexistserror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoErrorResponse;
  return proto.todo.UncompleteTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTodoalreadyexistserror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTodoalreadyexistserror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
*/
proto.todo.UncompleteTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
 */
proto.todo.UncompleteTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
*/
proto.todo.UncompleteTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
 */
proto.todo.UncompleteTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse todoAlreadyExistsError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getTodoalreadyexistserror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
*/
proto.todo.UncompleteTodoErrorResponse.prototype.setTodoalreadyexistserror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
 */
proto.todo.UncompleteTodoErrorResponse.prototype.clearTodoalreadyexistserror = function() {
  return this.setTodoalreadyexistserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.hasTodoalreadyexistserror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoOKResponse}
 */
proto.todo.UncompleteTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoOKResponse;
  return proto.todo.UncompleteTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoOKResponse}
 */
proto.todo.UncompleteTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.Todo.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.Todo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.Todo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Todo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    completed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    userid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.Todo}
 */
proto.todo.Todo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.Todo;
  return proto.todo.Todo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.Todo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.Todo}
 */
proto.todo.Todo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.Todo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.Todo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.Todo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Todo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.Todo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.Todo} returns this
 */
proto.todo.Todo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.todo.Todo.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.Todo} returns this
 */
proto.todo.Todo.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool completed = 3;
 * @return {boolean}
 */
proto.todo.Todo.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.todo.Todo} returns this
 */
proto.todo.Todo.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string userId = 4;
 * @return {string}
 */
proto.todo.Todo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.Todo} returns this
 */
proto.todo.Todo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.todo.TODO_EVENTS = {
  ADDED: 0,
  COMPLETED: 1,
  UNCOMPLETED: 2,
  MODIFIED_TITLE: 3,
  DELETED: 4
};

goog.object.extend(exports, proto.todo);
