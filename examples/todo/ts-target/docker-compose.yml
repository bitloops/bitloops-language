version: '3.8'

services:
  mongo:
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/usr/share/docker/mongo
    networks:
      - bitloops

  mongo1:
    image: mongo:5
    container_name: mongo1
    command: ['--replSet', 'my-replica-set', '--bind_ip_all', '--port', '30001']
    volumes:
      - ./data/mongo-1:/data/db
    ports:
      - 30001:30001
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
      start_period: 30s

  nats:
    image: nats:latest
    ports:
      - '4222:4222'
      - '8222:8222'
      - '6222:6222'
      - '4223:4223'
      - '6223:6223'
      - '8223:8223'
    volumes:
      - nats_data:/usr/share/docker/nats-server
    networks:
      - bitloops
    command: ['-js', '-m', '8223']

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: iam
      POSTGRES_USER: user
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/usr/share/docker/postgresql
    networks:
      - bitloops

  prometheus-nats-exporter:
    image: natsio/prometheus-nats-exporter:latest
    # environment:
    # POSTGRES_PASSWORD: postgres
    # POSTGRES_DB: yourdbname
    # POSTGRES_USER: yourusername
    ports:
      - '7777:7777'
    command:
      ['-DV', '-gatewayz', '-connz', '-varz', '-jsz=all', 'http://nats:8223']
    networks:
      - bitloops

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      # - "16686:16686"
      # - "14268:14268"
      - '6831:6831'
      - '6832:6832'
      - '5778:5778'
      - '16686:16686'
      - '4317:4317'
      - '4318:4318'
      - '14250:14250'
      - '14268:14268'
      - '14269:14269'
      - '9411:9411'
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    networks:
      - bitloops

  # hotrod:
  #   image: jaegertracing/example-hotrod:latest
  #   # To run the latest trunk build, find the tag at Docker Hub and use the line below
  #   # https://hub.docker.com/r/jaegertracing/example-hotrod-snapshot/tags
  #   #image: jaegertracing/example-hotrod-snapshot:0ab8f2fcb12ff0d10830c1ee3bb52b745522db6c
  #   ports:
  #     - "8080:8082"
  #   command: ["all"]
  #   environment:
  #     - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
  #   networks:
  #     - bitloops
  #   depends_on:
  #     - jaeger

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    ports:
      - '9091:9091'
    networks:
      - bitloops
    labels:
      org.label-schema.group: 'monitoring'
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - '9090:9090'
    networks:
      - bitloops
    labels:
      org.label-schema.group: 'monitoring'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file:
      - config
    volumes:
      - grafana_data:/usr/share/Docker/grafana
      - ./grafana/provisioning:/usr/share/docker/grafana/provisioning
    environment:
      - GF_SECURITY_opentelemetry_USER=${ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - '3003:9090'
    networks:
      - bitloops
    labels:
      org.label-schema.group: 'monitoring'

volumes:
  mongo_data:
  nats_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  bitloops:
